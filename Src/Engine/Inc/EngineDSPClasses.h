/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum DSPSlotIndex
{
    DSP_Room                =0,
    DSP_Player              =1,
    DSP_MAX                 =2,
};
enum EEnvelopeType
{
    ENV_Linear              =0,
    ENV_Exponential         =1,
    ENV_MAX                 =2,
};
enum ELFOType
{
    LFO_Sinusoidal          =0,
    LFO_Triangle            =1,
    LFO_Square              =2,
    LFO_Saw                 =3,
    LFO_Random              =4,
    LFO_LogIn               =5,
    LFO_LogOut              =6,
    LFO_LinearIn            =7,
    LFO_LinearOut           =8,
    LFO_MAX                 =9,
};
enum EFilterType
{
    FILTER_LP               =0,
    FILTER_HP               =1,
    FILTER_MAX              =2,
};
enum EQualityType
{
    QUA_Low                 =0,
    QUA_Medium              =1,
    QUA_High                =2,
    QUA_VeryHigh            =3,
    QUA_MAX                 =4,
};
enum EDelayType
{
    DLY_Plain               =0,
    DLY_LowPass             =1,
    DLY_AllPass             =2,
    DLY_MAX                 =3,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(FillValue)

#ifndef NAMES_ONLY

class UDSPBlock : public UObject
{
public:
    //## BEGIN PROPS DSPBlock
    //## END PROPS DSPBlock

    DECLARE_ABSTRACT_CLASS(UDSPBlock,UObject,0,Engine)
	void PostEditChange(UProperty* PropertyThatChanged);
};

class UDSPEcho : public UDSPBlock
{
public:
    //## BEGIN PROPS DSPEcho
    FLOAT delay;
    FLOAT DecayRatio;
    FLOAT DryMix;
    FLOAT WetMix;
    //## END PROPS DSPEcho

    DECLARE_CLASS(UDSPEcho,UDSPBlock,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPEcho)
};

class UDSPHighPass : public UDSPBlock
{
public:
    //## BEGIN PROPS DSPHighPass
    FLOAT CutOff;
    FLOAT Resonance;
    //## END PROPS DSPHighPass

    DECLARE_CLASS(UDSPHighPass,UDSPBlock,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPHighPass)
};

class UDSPLowPass : public UDSPBlock
{
public:
    //## BEGIN PROPS DSPLowPass
    FLOAT CutOff;
    FLOAT Resonance;
    //## END PROPS DSPLowPass

    DECLARE_CLASS(UDSPLowPass,UDSPBlock,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPLowPass)
};

class UDSPReverb : public UDSPBlock
{
public:
    //## BEGIN PROPS DSPReverb
    FLOAT RoomSize;
    FLOAT Damp;
    FLOAT DryMix;
    FLOAT WetMix;
    FLOAT Width;
    //## END PROPS DSPReverb

    DECLARE_CLASS(UDSPReverb,UDSPBlock,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPReverb)
};

class UDSPSoftware : public UDSPBlock
{
public:
    //## BEGIN PROPS DSPSoftware
    TArrayNoInit<class UDSPSoftwareBlock*> Blocks;
    FLOAT Gain;
    //## END PROPS DSPSoftware

    DECLARE_CLASS(UDSPSoftware,UDSPBlock,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPSoftware)
};

class UDSPPreset : public UObject
{
public:
    //## BEGIN PROPS DSPPreset
    TArrayNoInit<class UDSPBlock*> DSPBlocks;
    INT Handle;
    BITFIELD Dirty:1;
    FLOAT Duration;
    FLOAT Fade;
    BYTE DSPSlot;
    //## END PROPS DSPPreset

    virtual void Reload();
    virtual void Apply();
    void Stop();
    DECLARE_FUNCTION(execReload)
    {
        P_FINISH;
        Reload();
    }
    DECLARE_FUNCTION(execApply)
    {
        P_FINISH;
        Apply();
    }
    DECLARE_FUNCTION(execStop)
    {
        P_FINISH;
        Stop();
    }
    DECLARE_CLASS(UDSPPreset,UObject,0,Engine)
	UDSPPreset();
	virtual void FinishDestroy();

	void PostEditChange(UProperty* PropertyThatChanged)
	{
		__super::PostEditChange(PropertyThatChanged);

		Reload();
	}
};

struct FDescriptor
{
    INT Type;
    FLOAT Params[16];
};

struct DSPSoftwareBlock_eventFillValue_Parms
{
    struct FDescriptor Desc;
    DSPSoftwareBlock_eventFillValue_Parms(EEventParm)
    {
    }
};
class UDSPSoftwareBlock : public UObject
{
public:
    //## BEGIN PROPS DSPSoftwareBlock
    //## END PROPS DSPSoftwareBlock

    void eventFillValue(struct FDescriptor& Desc)
    {
        DSPSoftwareBlock_eventFillValue_Parms Parms(EC_EventParm);
        Parms.Desc=Desc;
        ProcessEvent(FindFunctionChecked(ENGINE_FillValue),&Parms);
        Desc=Parms.Desc;
    }
    DECLARE_ABSTRACT_CLASS(UDSPSoftwareBlock,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UDSPSoftwareBlock)
};

class UReverbProperty : public UObject
{
public:
    //## BEGIN PROPS ReverbProperty
    INT Environment;
    FLOAT EnvSize;
    FLOAT EnvDiffusion;
    INT Room;
    INT RoomHF;
    INT RoomLF;
    FLOAT DecayTime;
    FLOAT DecayHFRatio;
    FLOAT DecayLFRatio;
    INT Reflections;
    FLOAT ReflectionsDelay;
    FVector ReflectionsPan;
    INT Reverb;
    FLOAT ReverbDelay;
    FVector ReverbPan;
    FLOAT EchoTime;
    FLOAT EchoDepth;
    FLOAT ModulationTime;
    FLOAT ModulationDepth;
    FLOAT AirAbsorptionHF;
    FLOAT HFReference;
    FLOAT LFReference;
    FLOAT RoomRolloffFactor;
    FLOAT Diffusion;
    FLOAT Density;
    BITFIELD bDecayTimeScale:1;
    BITFIELD bReflectionsScale:1;
    BITFIELD bReflectionsDelayScale:1;
    BITFIELD bReverbScale:1;
    BITFIELD bReverbDelayScale:1;
    BITFIELD bDecayHFLimit:1;
    BITFIELD bEchoTimeScale:1;
    BITFIELD bModulationTimeScale:1;
    //## END PROPS ReverbProperty

    DECLARE_CLASS(UReverbProperty,UObject,0,Engine)
	virtual void PostEditChange(UProperty* PropertyThatChanged);
};

#endif

AUTOGENERATE_FUNCTION(UDSPPreset,-1,execStop);
AUTOGENERATE_FUNCTION(UDSPPreset,-1,execApply);
AUTOGENERATE_FUNCTION(UDSPPreset,-1,execReload);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef ENGINE_DSP_NATIVE_DEFS
#define ENGINE_DSP_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,UDSPBlock);
DECLARE_NATIVE_TYPE(Engine,UDSPEcho);
DECLARE_NATIVE_TYPE(Engine,UDSPHighPass);
DECLARE_NATIVE_TYPE(Engine,UDSPLowPass);
DECLARE_NATIVE_TYPE(Engine,UDSPPreset);
DECLARE_NATIVE_TYPE(Engine,UDSPReverb);
DECLARE_NATIVE_TYPE(Engine,UDSPSoftware);
DECLARE_NATIVE_TYPE(Engine,UDSPSoftwareBlock);
DECLARE_NATIVE_TYPE(Engine,UReverbProperty);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE_DSP \
	UDSPBlock::StaticClass(); \
	UDSPEcho::StaticClass(); \
	UDSPHighPass::StaticClass(); \
	UDSPLowPass::StaticClass(); \
	UDSPPreset::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUDSPPresetNative; \
	UDSPReverb::StaticClass(); \
	UDSPSoftware::StaticClass(); \
	UDSPSoftwareBlock::StaticClass(); \
	UReverbProperty::StaticClass(); \

#endif // ENGINE_DSP_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UDSPPreset) GEngineUDSPPresetNatives[] = 
{ 
	MAP_NATIVE(UDSPPreset,execStop)
	MAP_NATIVE(UDSPPreset,execApply)
	MAP_NATIVE(UDSPPreset,execReload)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UDSPPreset);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UDSPBlock)
VERIFY_CLASS_OFFSET_NODIE(U,DSPEcho,delay)
VERIFY_CLASS_OFFSET_NODIE(U,DSPEcho,WetMix)
VERIFY_CLASS_SIZE_NODIE(UDSPEcho)
VERIFY_CLASS_OFFSET_NODIE(U,DSPHighPass,CutOff)
VERIFY_CLASS_OFFSET_NODIE(U,DSPHighPass,Resonance)
VERIFY_CLASS_SIZE_NODIE(UDSPHighPass)
VERIFY_CLASS_OFFSET_NODIE(U,DSPLowPass,CutOff)
VERIFY_CLASS_OFFSET_NODIE(U,DSPLowPass,Resonance)
VERIFY_CLASS_SIZE_NODIE(UDSPLowPass)
VERIFY_CLASS_OFFSET_NODIE(U,DSPPreset,DSPBlocks)
VERIFY_CLASS_OFFSET_NODIE(U,DSPPreset,DSPSlot)
VERIFY_CLASS_SIZE_NODIE(UDSPPreset)
VERIFY_CLASS_OFFSET_NODIE(U,DSPReverb,RoomSize)
VERIFY_CLASS_OFFSET_NODIE(U,DSPReverb,Width)
VERIFY_CLASS_SIZE_NODIE(UDSPReverb)
VERIFY_CLASS_OFFSET_NODIE(U,DSPSoftware,Blocks)
VERIFY_CLASS_OFFSET_NODIE(U,DSPSoftware,Gain)
VERIFY_CLASS_SIZE_NODIE(UDSPSoftware)
VERIFY_CLASS_SIZE_NODIE(UDSPSoftwareBlock)
VERIFY_CLASS_OFFSET_NODIE(U,ReverbProperty,Environment)
VERIFY_CLASS_OFFSET_NODIE(U,ReverbProperty,Density)
VERIFY_CLASS_SIZE_NODIE(UReverbProperty)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
