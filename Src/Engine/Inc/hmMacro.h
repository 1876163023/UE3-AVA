//
// hmMacro.h
//
// deathcure@redduck.com
//---------------------------------------------------------------------------
#ifndef hmMacroH
#define hmMacroH
//---------------------------------------------------------------------------
#define _hms_defLoading \
	BYTE value;

#define _hms_loadValue(a) \
	Ar << value; a = value ? 1 : 0

#define _hms_defSaving \
	BYTE zero = 0; \
	BYTE one = 1;

#define _hms_saveValue(a) \
	Ar << (a ? one:zero)

#define _hms_serializeBytes(a) \
	Ar.ByteOrderSerialize( &a, sizeof(a) );	
//---------------------------------------------------------------------------
#ifdef RubyScript
// header를 읽어 hmSerialize를 뱉어내는 루비 스크립트, 실행후 적당히 수정해주어야함
def generateSerializer(srcFilename, dstFileName) 
	className = 'None'
	File.open(srcFilename) do |inFile|		
		baseTypes = {}
	  	bitfieldTypes = {}
	  	structTypes = {}
	  	tArrayNoInitTypes = {}
	  	classTypes = {}
		tArrayTypes = {}
		fScriptDelegateTypes = {}
		unknownValues = []
		
	  	inFile.each do |line|
	    	line.squeeze!(" ")
	    
		    if line =~ /\/\/\#\# BEGIN PROPS\s+/
		    	if $' =~ /\w+/
		    		className = 'A' + $&
		    	end	      		
	      		baseTypes = {}
			  	bitfieldTypes = {}
			  	structTypes = {}
			  	tArrayNoInitTypes = {}
			  	classTypes = {}
			  	tArrayTypes = {}
				fScriptDelegateTypes = {}		
				unknownValues = []	

	    	elsif line =~ /\/\/\#\# END PROPS /	      		
	      		File.open(dstFileName, "a") do |outFile|
	      			outFile.puts "#ifdef EnableHostMigration"
				 	outFile.puts "void #{className}::hmSerialize(FArchive& Ar)"
				 	outFile.puts "{"
				 	outFile.puts "	//Autogenerated code by HmSerializeGenerator/generateSerializer.rb"
				 	outFile.puts ""
				 	outFile.puts "	Super::hmSerialize(Ar);"
				 	outFile.puts ""
				 	
				 	if bitfieldTypes.length > 0
					 	outFile.puts "	if (Ar.IsLoading() ) {"
					 	outFile.puts "		_hms_defLoading;"
					 	bitfieldTypes.each do |key, value|
					 		outFile.puts "		_hms_loadValue(#{key}); //#{value}"
					 	end
					 	outFile.puts "	}"
					 	outFile.puts "	else {"
					 	outFile.puts "		_hms_defSaving;"
					 	bitfieldTypes.each do |key, value|
					 		outFile.puts "		_hms_saveValue(#{key}); //#{value}"
					 	end
					 	outFile.puts "	}"
					 	outFile.puts ""
					end
				 	
				 	baseTypes.each do |key, value|
				 		outFile.puts "	Ar << #{key}; //#{value}"
				 	end
				 	
				 	structTypes.each do |key, value|
				 		outFile.puts "	_hms_serializeBytes(#{key}); //#{value}"
				 	end				 	
				 	
				 	if tArrayNoInitTypes.length > 0 or classTypes.length > 0
				 		outFile.puts ""
					 	outFile.puts "	//{{other values"
					 	
					 	tArrayNoInitTypes.each do |key, value|
					 		outFile.puts "	//#{value}"
					 	end					 	
					 	
					 	classTypes.each do |key, value|
						 	outFile.puts "	//#{value}"
					 	end
					 	
					 	unknownValues.each do |value|
					 		outFile.puts "	//#{value}"
					 	end

					 	outFile.puts "	//}}other values"
					end
				 	
				 	outFile.puts "}"
				 	outFile.puts "#endif"
				 	outFile.puts ""
				end
	            
	      		className = 'None'
	    	elsif className != 'None'
	      		if line =~ /INT\s+/ or line =~ /FLOAT\s+/ or line =~ /FName\s+/ or line =~ /BYTE\s+/ or 
	      			line =~ /QWORD\s+/ or line =~ /FQuat\s+/ or line =~ /FCylinder\s+/ or line =~ /FGuid\s+/ or
	        		line =~ /FStringNoInit\s+/ or line =~ /FColor\s+/ or 
	        		line =~ /FColorMaterialInput\s+/ or line =~ /FScalarMaterialInput\s+/ or line =~ /FVectorMaterialInput\s+/ or 
	        		line =~ /FVector\s+/ or line =~ /FInterpCurveVector\s+/ or line =~ /FInterpCurveVector2D\s+/ or 
	        		line =~ /FVector2D\s+/ or line =~ /FRotator\s+/ or line =~ /FLinearColor\s+/ or 
	        		line =~ /FIntPoint\s+/ or line =~ /FPointer\s+/ or line =~ /FMatrix\s+/ or 
	        		line =~ /FInterpCurveFloat\s+/
	        		
	        		if $' =~ /\w+/          
	          			#baseTypes.push($&)
	          			baseTypes[$&] = line
	        		end
	      		elsif line =~ /BITFIELD\s+/
	        		if $' =~ /\w+/
	          			#bitfieldTypes.push($&)
	          			bitfieldTypes[$&] = line
	        		end
	      		elsif line =~ /struct\s+\w+\s+/ or line =~ /FRigidBodyState\s+/
	        		if $' =~ /\w+/
	          			#puts "[struct type] #{$&} //<- #{line}"
	          			#structTypes.push($&)
	          			structTypes[$&] = line
	        		end
	      		elsif line =~ /TArrayNoInit<\w+\s*\w*>\s+/
	        		if $' =~ /\w+/
	          			#puts "[TArrayNoInit type] #{$&} //<- #{line}"
	          			#tArrayNoInitTypes.push($&)
	          			tArrayNoInitTypes[$&] = line
	        		end
      			elsif line =~ /TArrayNoInit<\w+\s*\w*\*+>\s*/
	        		if $' =~ /\w+/
	          			#puts "[TArrayNoInit<*> type] #{$&} //<- #{line}"
	          			#tArrayNoInitTypes.push($&)
	          			tArrayNoInitTypes[$&] = line
	        		end
	      		elsif line =~ /TArrayNoInit<\w+\s*\w*>\*+\s*/
	        		if $' =~ /\w+/
	          			#puts "[TArrayNoInit<>* type] #{$&} //<- #{line}"
	          			#tArrayNoInitTypes.push($&)
	          			tArrayNoInitTypes[$&] = line
	        		end
	        	elsif line =~ /TArray<\w+\s*\w*>\*+\s*/
	        		if $' =~ /\w+/
	          			#puts "[TArray<>* type] #{$&} //<- #{line}"
	          			#tArrayNoInitTypes.push($&)
	          			tArrayTypes[$&] = line
	        		end
	        	elsif line =~ /TArray<\w+\s*\w*>\s*/
	        		if $' =~ /\w+/
	          			#puts "[TArray<> type] #{$&} //<- #{line}"
	          			#tArrayNoInitTypes.push($&)
	          			tArrayTypes[$&] = line
	        		end
	      		elsif line =~ /class\s+\w+\*\s*/
	        		if $' =~ /\w+/
	          			#puts "[class* type] #{$&} //<- #{line}"
	          			#classTypes.push($&)
	          			classTypes[$&] = line
	        		end
	      		elsif line =~ /class\s+\w+\s*/
	        		if $' =~ /\w+/
	          			#puts "[class type] #{$&} //<- #{line}"
	          			#classTypes.push($&)
	          			classTypes[$&] = line
	        		end   
	        	elsif line =~ /FScriptDelegate\s+/
	        		if $' =~ /\w+/
	          			#puts "[FScriptDelegate type] #{$&} //<- #{line}"
	          			#structTypes.push($&)
	          			fScriptDelegateTypes[$&] = line
	        		end   
	      		else	        		
	        		unknownValues.push(line)
	      		end
	    	end
	  	end
	 end
	 
	 
end

generateSerializer("avaGameClasses.h", "HmSerializers.cpp")
generateSerializer("EngineClasses.h", "HmSerializers.cpp")
generateSerializer("EnginePhysicsClasses.h", "HmSerializers.cpp")
#endif
#endif