<!--
Copyright 1998-2006 Epic Games, Inc. All Rights Reserved.

This is our build.xml file that Ant uses to run various targets (e.g. building, smoke testing, running commandlets, etc).


 devenv /build debug /project proj1 myapp.sln

<exec ... >
  <env key="PATH" path="${java.library.path}:${basedir}/bin"/>
</exec>


-->

<project name="UnrealEngine3" default="UE3BuildTypes" basedir=".">
    <description>
        Unreal Engine build.xml
    </description>

  <!-- import tasks that we will utilize -->
  <taskdef name="vc7" classname="net.sourceforge.jtaskdefs.VC7"/>
  <taskdef name="text2xml" classname="com.gb.bci.ant.taskdefs.TextToXml"/>

  <!-- set global properties for this build -->

  <!-- this will grab the values from the .properties file and inline them here -->
  <property file="build.properties"/>


  <property name="VS_DIR" value="C:\Program Files\Microsoft Visual Studio 8\Common7\IDE"/>
<!--
  <property name="compileOptions.logDir" value="C:\continuousIntegration\checkout\UE3_codeBuilder\UnrealEngine3\AutomatedBuildFilez"/>
  <property name="compileOptions.logDir" value="../../AutomatedBuildFilez"/>
-->
  <property name="compileOptions.logDir" value="${unrealEngine3.src.dir}\..\..\AutomatedBuildFilez"/>



  <property name="compileOptions.projectName" value="UnrealEngine3"/>



  <property name="exampleGame.log.dotU" value="ExampleGameDotUMake"/>
  <property name="exampleGame.log.smoketest.server" value="ExampleGameSmokeTest_Server"/>
  <property name="exampleGame.log.smoketest.checkNativeClassSizes" value="ExampleGameSmokeTest_CheckNativeClassSizes"/>
  <property name="exampleGame.log.loadPackages" value="ExampleGameLoadPackages"/>
  <property name="exampleGame.log.xenonCooking" value="ExampleGameXenonCooking"/>
  <property name="exampleGame.log.ps3Cooking" value="ExampleGamePS3Cooking"/>



  <property name="ut2007.log.dotU" value="UT2007DotUMake"/>
  <property name="ut2007.log.smoketest.server." value="UT2007SmokeTest_Server"/>
  <property name="ut2007.log.smoketest.checkNativeClassSizes" value="UT2007SmokeTest_CheckNativeClassSizes"/>
  <property name="ut2007.log.loadPackages" value="UT2007GameLoadPackages"/>
  <property name="ut2007.log.xenonCooking" value="UT2007XenonCooking"/>
  <property name="ut2007.log.ps3Cooking" value="UT2007PS3Cooking"/>
  <property name="ut2007.log.benchmark.fps" value="UT2007BenchmarkFPS"/>




  <property name="warfare.log.dotU" value="WarfareDotUMake"/>
  <property name="warfare.log.smoketest.server" value="WarfareSmokeTest_Server"/>
  <property name="warfare.log.smoketest.checkNativeClassSizes" value="WarfareSmokeTest_CheckNativeClassSizes"/>
  <property name="warfare.log.loadPackages" value="WarfareLoadPackages"/>
  <property name="warfare.log.xenonCooking" value="WarfareXenonCooking"/>

  <property name="dotU.commandLineParams" value="make -intermediate -full -unattended -warningsaserrors"/>

  <property name="dotU.loadpackages.commandLineParams" value="run editor.LoadPackageCommandlet -all -unattended -treatloadwarningsaserrors"/>


  <property name="Xbox360.cooking.commandLineParams" value="run editor.cookpackages -platform=xenon -nopause -unattended -alwaysrecookscript -alwaysrecookmaps"/>
  <property name="Xbox360.cookingFull.commandLineParams" value="run editor.cookpackages -platform=xenon -nopause -unattended -full"/>

  <property name="PS3.cooking.commandLineParams" value="run editor.cookpackages -platform=ps3 -nopause -unattended -alwaysrecookscript -alwaysrecookmaps"/>
  <property name="PS3.cookingFull.commandLineParams" value="run editor.cookpackages -platform=ps3 -nopause -unattended -full"/>


 <!-- -rebuild -->



  <property name="smoketest.commandLineParams.server" value="run engine.smokeTestCommandlet -unattended -SERVER"/>
  <property name="smoketest.commandLineParams.checkNativeClassSizes" value="run engine.smokeTestCommandlet -unattended -CHECK_NATIVE_CLASS_SIZES"/>

  <property name="smoketest.timeoutPeriod" value="600000"/> <!-- 600 seconds -->
  <property name="benchmark.timeoutPeriod" value="900000"/> <!-- 15 minutes minutes -->




  <target name="init">
    <tstamp/> <!-- Create the time stamp -->
    <mkdir dir="${compileOptions.logDir}"/>

    <mkdir dir="${unrealEngine3.binaries.dir}/../ExampleGame/CookedPS3"/>
    <mkdir dir="${unrealEngine3.binaries.dir}/../ExampleGame/CookedXenon"/>

    <mkdir dir="${unrealEngine3.binaries.dir}/../UTGame/CookedPS3"/>
    <mkdir dir="${unrealEngine3.binaries.dir}/../UTGame/CookedXenon"/>

    <mkdir dir="${unrealEngine3.binaries.dir}/../WarGame/CookedXenon"/>


    <mkdir dir="${unrealEngine3.binaries.dir}/../ExampleGame/Script"/>
    <mkdir dir="${unrealEngine3.binaries.dir}/../UTGame/Script"/>
    <mkdir dir="${unrealEngine3.binaries.dir}/../WarGame/Script"/>

  </target>

  <!-- look at the various UE3_<type>.xml for the syncing -->
  <target name="sync" depends="init">

  </target>


  <target name="cleanArtifactsDir">

     <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${compileOptions.logDir}" defaultexcludes="no">
              <include name="**/*" />
        </fileset>
     </delete>

  </target>


  <target name="cleanIniFiles" depends=""
        description="delete all of the .ini files" >

 <delete>
    <fileset dir="../../ExampleGame/Config" >
       <include name="Example*.ini"/>
    </fileset>
  </delete>

  <delete>
    <fileset dir="../../GearGame/Config" >
       <include name="Gear*.ini"/>
    </fileset>
  </delete>

 <delete>
    <fileset dir="../../UTGame/Config" >
       <include name="UT*.ini"/>
    </fileset>
  </delete>

  <delete>
    <fileset dir="../../WarGame/Config" >
       <include name="War*.ini"/>
    </fileset>
  </delete>

  </target>




  <target name="cleanDotUDir" depends=""
        description="delete all of the .u files" >

 <delete>
    <fileset dir="../../ExampleGame/Script" >
       <include name="*.u"/>
    </fileset>
  </delete>


 <delete>
    <fileset dir="../../GearGame/Script" >
       <include name="*.u"/>
    </fileset>
  </delete>


 <delete>
    <fileset dir="../../UTGame/Script" >
       <include name="*.u"/>
    </fileset>
  </delete>

  <delete>
    <fileset dir="../../WarGame/Script" >
       <include name="*.u"/>
    </fileset>
  </delete>

  </target>



  <target name="cleanGeneratedFiles" depends="init, cleanIniFiles, cleanArtifactsDir, cleanDotUDir">

 <delete>
    <fileset dir="../../" >
       <include name="**/LocalShaderCache.upk"/>
    </fileset>
  </delete>




  </target>


  <target name="cleanPC"
        description="clean up" depends="init" >
     <exec dir="${unrealEngine3.src.dir}" executable="C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\devenv" output="..\..\AutomatedBuildFilez\cleanOutputDebug.txt" failonerror="true">
  <arg line="/clean debug UnrealEngine3.sln"/>
</exec>

     <exec dir="${unrealEngine3.src.dir}" executable="C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\devenv" output="..\..\AutomatedBuildFilez\cleanOutputRelease.txt" failonerror="true">
  <arg line="/clean release UnrealEngine3.sln"/>
</exec>

     <exec dir="${unrealEngine3.src.dir}" executable="C:\Program Files\Microsoft Visual Studio 8\Common7\IDE\devenv" output="..\..\AutomatedBuildFilez\cleanOutputReleaseLTCG.txt" failonerror="true">
  <arg line="/clean releaseLTCG UnrealEngine3.sln"/>
</exec>


  </target>



  <target name="compilePC">
    <echo message = "   -Building PC" />


    <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "${compileOptions.rebuild.PC}"
    />      

<!--
      rebuild = "${compileOptions.rebuild.PC}"
  <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

-->

</target>



<target name="compile_verification_CHECK_PUREVIRTUALS">
  <echo message = "   -Building PC with CHECK_PUREVIRTUALS" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DCHECK_PUREVIRTUALS#1"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>


<target name="compile_verification_CHECK_NATIVE_MATCH">
  <echo message = "   -Building PC with CHECK_NATIVE_MATCH" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DCHECK_NATIVE_MATCH#1"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>

<!-- check native class sizes breaks the release compiler so we build in debug -->
<target name="compile_verification_CHECK_NATIVE_CLASS_SIZES">
  <echo message = "   -Building PC with CHECK_NATIVE_CLASS_SIZES" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "debug"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DCHECK_NATIVE_CLASS_SIZES#1"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>



<!-- check native class sizes breaks the release compiler so we build in debug -->
<target name="compile_verification_FINAL_RELEASE">
  <echo message = "   -Building PC with FINAL_RELEASE" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "ReleaseLTCG"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
    </vc7>      

  <echo message = "   -Building Xenon with FINAL_RELEASE" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "XeReleaseLTCG"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "false"
      rebuild = "true"
     >
    </vc7>   


  <!-- on second pass rebuild must always needs to be false -->
  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "XeReleaseLTCG"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "false" 
  />      



<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>


<target name="compile_verification_WITHOUT_NOVODEX">
  <echo message = "   -Building PC with WITHOUT_NOVODEX" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DWITH_NOVODEX#0"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>


<target name="compile_verification_WITHOUT_FACEFX">
  <echo message = "   -Building PC with WITHOUT_FACEFX" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DWITH_FACEFX#0"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>



<target name="compile_verification_USE_NULL_RHI">
  <echo message = "   -Building PC with USE_NULL_RHI" />

  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PC}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "true"
     >
      <env key="CL" value="/DUSE_NULL_RHI#1"/>
    </vc7>      

<!--
   <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
   />      
-->

</target>






<target name="compileXenonRebuild">
  <echo message = "   -Building xenon rebuild" />


  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.Xbox360}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "false"
      rebuild = "${compileOptions.rebuild.Xbox360}"
  />      

<!--
  <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      
-->

</target>


<!-- 
     we need to build all of xenon first as the .vcproj will try to connect
     to the xenon and will fail as we don't have one attached to the build machine.
     Then we will rebuild them which will not try to connect to the xenon
-->
<target name="compileXenon" depends="compileXenonRebuild">
  <echo message = "   -Building xenon looking for errors " />

  <!-- rebuild must always needs to be false -->
  <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.Xbox360}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      failonerror = "true"
      rebuild = "false" 
  />      

<!--
  <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      
-->

</target>


  <target name="compilePS3_ProDG">
    <echo message = "   -Building PS3 with ProDG" />


    <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}"
      projectfolder = ""
      project = "${compileOptions.projectName}"
      buildmode = "${compileOptions.buildmode.PS3}"
      logfile = "${compileOptions.logDir}/${compileOptions.projectName}_prodg.log"
      failonerror = "true"
      rebuild = "${compileOptions.rebuild.PS3}"
    />      

<!--
      rebuild = "${compileOptions.rebuild.PC}"
  <text2xml srcfile = "${compileOptions.logDir}/${compileOptions.projectName}.log"
      destfile = "${compileOptions.logDir}/${compileOptions.projectName}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

-->

</target>


<target name="cleanPS3_exampleGame" depends="init" >

  <echo message = "   -cleaning PS3 exampleGame " />

  <exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3Example_clean.log" failonerror="true">
    <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=release GAMENAME=EXAMPLEGAME clean"/>
  </exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3Example_clean.log"
      destfile = "${compileOptions.logDir}/ps3Example_clean_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>


<target name="cleanPS3_utGame" depends="init" >

  <echo message = "   -cleaning PS3 utGame " />

  <exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3UTGame_clean.log" failonerror="true">
    <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=release GAMENAME=UTGAME clean"/>
  </exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3UTGame_clean.log"
      destfile = "${compileOptions.logDir}/ps3UTGame_clean_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>




<target name="cleanPS3_exampleGameDebug" depends="init" >

  <echo message = "   -cleaning PS3 exampleGameDebug " />

  <exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3ExampleDebug_clean.log" failonerror="true">
    <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=debug GAMENAME=EXAMPLEGAME clean"/>
  </exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3ExampleDebug_clean.log"
      destfile = "${compileOptions.logDir}/ps3ExampleDebug_clean_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>


<target name="compilePS3_exampleGameDebug">
  <echo message = "   -Building PS3 exampleGame debug" />

   <!-- Compile the code -->
<exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3ExampleGameDebug.log" failonerror="true">
  <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=debug GAMENAME=EXAMPLEGAME"/>
</exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3ExampleGameDebug.log"
      destfile = "${compileOptions.logDir}/ps3ExampleGameDebug_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>


<target name="compilePS3_rebuild_example_debug" depends="cleanPS3_exampleGameDebug" >
  <echo message = "   -Rebuilding PS3 debug" />

  <antcall target="compilePS3_exampleGameDebug" />
  
</target>




<target name="compilePS3_rebuild" depends="cleanPS3_exampleGame, cleanPS3_utGame">
  <echo message = "   -Rebuilding PS3 " />

  <antcall target="compilePS3_exampleGame" />
  <antcall target="compilePS3_utGame" />
  
</target>



<target name="compilePS3_exampleGame">
  <echo message = "   -Building PS3 exampleGame release" />

   <!-- Compile the code -->
<exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3ExampleGame.log" failonerror="true">
  <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=release GAMENAME=EXAMPLEGAME"/>
</exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3ExampleGame.log"
      destfile = "${compileOptions.logDir}/ps3ExampleGame_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>


<target name="compilePS3_utGame">
  <echo message = "   -Building PS3 utGame release" />

   <!-- Compile the code -->
<exec dir="${unrealEngine3.src.dir}\PS3" executable="make" output="${compileOptions.logDir}/ps3UTGame.log" failonerror="true">
  <arg line="-k PSGL_GPU_TYPE=RSX BUILDTYPE=release GAMENAME=UTGAME"/>
</exec>

  <text2xml srcfile = "${compileOptions.logDir}/ps3UTGame.log"
      destfile = "${compileOptions.logDir}/ps3UTGame_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${compileOptions.projectName}"
  />      

</target>



  <target name="buildExampleGameDotU" depends=""
        description="compile the .uc files for" >

     <echo message = "   -exampleGame build dot U" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.dotU}.log" failonerror="true"> 
       <arg line="${dotU.commandLineParams}"/>
     </exec>


     <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.dotU}.log"
        destfile = "${compileOptions.logDir}/${exampleGame.log.dotU}_log.xml"
        element = "${compileOptions.projectName}"
        attribute = "name"
        value = "${exampleGame.log.dotU}"
     />   

  </target>



  <target name="buildUT2007DotU" depends=""
        description="compile the .uc files for" >

    <echo message = "   -ut2007 build dot U" />

    <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.dotU}.log" failonerror="true"> 
       <arg line="${dotU.commandLineParams}"/>
    </exec>


     <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.dotU}.log"
       destfile = "${compileOptions.logDir}/${ut2007.log.dotU}_log.xml"
       element = "${compileOptions.projectName}"
       attribute = "name"
       value = "${ut2007.log.dotU}"
     />   

  </target>


  <target name="buildUT2007DotUSansPrivateContent" depends=""
        description="compile the .uc files for" >

    <echo message = "   -ut2007 build dot U" />

    <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.dotU}.log" failonerror="true"> 
       <arg line="make -intermediate -full -unattended"/>
    </exec>


     <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.dotU}.log"
       destfile = "${compileOptions.logDir}/${ut2007.log.dotU}_log.xml"
       element = "${compileOptions.projectName}"
       attribute = "name"
       value = "${ut2007.log.dotU}"
     />   

  </target>




  <target name="buildWarfareDotU" depends=""
        description="compile the .uc files for" >

    <echo message = "   -warfare build dot U" />

    <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.dotU}.log" failonerror="true"> 
       <arg line="${dotU.commandLineParams}"/>
    </exec>


    <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.dotU}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.dotU}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.dotU}"
    />   

  </target>


  <target name="buildWarfareDotUBVT" depends=""
        description="compile the .uc files for" >

    <echo message = "   -warfare build dot U" />

    <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.dotU}.log" failonerror="true"> 
       <arg line="${dotU.commandLineParams} -MGS_AUTOMATION"/>
    </exec>


    <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.dotU}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.dotU}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.dotU}"
    />   

  </target>






  <target name="xenonCookContent_exampleGame" depends="init"
        description="cook the xenon content" >

  <echo message = "   -exampleGame xenon cook content" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.xenonCooking}.log" failonerror="true"> 
        <arg line="${Xbox360.cooking.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.xenonCooking}"
  />   

  </target>



  <target name="xenonCookContent_ut2007" depends="init"
        description="cook the xenon content" >

  <echo message = "   -ut2007 xenon cook content" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.xenonCooking}.log" failonerror="true"> 
       <arg line="${Xbox360.cooking.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.xenonCooking}"
  />   

  </target>



  <target name="xenonCookContent_warfare" depends="init"
        description="cook the xenon content" >

  <echo message = "   -warfare xenon cook content" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.xenonCooking}.log" failonerror="true"> 
        <arg line="${Xbox360.cooking.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.xenonCooking}"
  />   

  </target>




  <target name="xenonCookContent_exampleGameFull" depends="init"
        description="cook the xenon content -full" >

  <echo message = "   -exampleGame xenon cook content FULL" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.xenonCooking}.log" failonerror="true"> 
        <arg line="${Xbox360.cookingFull.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.xenonCooking}"
  />   

  </target>



  <target name="xenonCookContent_ut2007Full" depends="init"
        description="cook the xenon content -full" >

  <echo message = "   -ut2007 xenon cook content FULL" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.xenonCooking}.log" failonerror="true"> 
       <arg line="${Xbox360.cookingFull.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.xenonCooking}"
  />   

  </target>



  <target name="xenonCookContent_warfareFull" depends="init"
        description="cook the xenon content -full" >

  <echo message = "   -warfare xenon cook content FULL" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.xenonCooking}.log" failonerror="true"> 
        <arg line="${Xbox360.cookingFull.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.xenonCooking}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.xenonCooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.xenonCooking}"
  />   

  </target>




  <target name="ps3CookContent_exampleGame" depends="init"
        description="cook the ps3 content" >

  <echo message = "   -exampleGame ps3 cook content" />

    <!-- delete all of the cooked content -->
     <delete includeEmptyDirs="true" failonerror="true">
        <fileset dir="${unrealEngine3.binaries.dir}/../ExampleGame/CookedPS3" defaultexcludes="no">
              <include name="**/*" />
        </fileset>
     </delete>


   <!-- cook the content -->
     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.ps3Cooking}.log" failonerror="true"> 
       <arg line="${PS3.cooking.commandLineParams}"/>
     </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.ps3Cooking}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.ps3Cooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.ps3Cooking}"
  />   

  </target>


  <target name="ps3CookContent_utGame" depends="init"
        description="cook the ps3 content for ut game" >

    <!-- delete all of the cooked content -->
     <delete includeEmptyDirs="true" failonerror="true">
        <fileset dir="${unrealEngine3.binaries.dir}/../UTGame/CookedPS3" defaultexcludes="no">
              <include name="**/*" />
        </fileset>
     </delete>


   <!-- cook the content -->
     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.ps3Cooking}.log" failonerror="true"> 
       <arg line="${PS3.cooking.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.ps3Cooking}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.ps3Cooking}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.ps3Cooking}"
  />   



</target>



  <target name="loadPackages_exampleGame" depends="init"
        description="load the example game content" >

  <echo message = "   -exampleGame load all packages" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.loadPackages}.log" failonerror="true"> 
        <arg line="${dotU.loadpackages.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.loadPackages}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.loadPackages}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.loadPackages}"
  />   

  </target>





  <target name="loadPackages_ut2007" depends="init"
        description="load the ut2007 game content" >

    <echo message = "   -ut2007 load all packages" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.loadPackages}.log" failonerror="true"> 
       <arg line="${dotU.loadpackages.commandLineParams}"/>
     </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.loadPackages}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.loadPackages}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.loadPackages}"
  />   

  </target>



  <target name="loadPackages_warfare" depends="init"
        description="load the warfare game content" >

  <echo message = "   -warfare load all packages" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.loadPackages}.log" failonerror="true"> 
      <arg line="${dotU.loadpackages.commandLineParams}"/>
    </exec>


  <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.loadPackages}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.loadPackages}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.loadPackages}"
  />   

  </target>






  <target name="smokeTest_exampleGame" depends="init"
        description="launch the game and then quit.  used to see if the game runs and also if the CHECK_NATIVE_CLASS_SIZES" >

  <echo message = "   -exampleGame smoketest" />

  <echo message = "      -exampleGame smoketest server" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.smoketest.server}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
        <arg line="${smoketest.commandLineParams.server}"/>
     </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.smoketest.server}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.smoketest.server}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.smoketest.server}"
  />   


  <echo message = "      -exampleGame smoketest checkNativeClassSizes" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${exampleGame.execName}" output="${compileOptions.logDir}/${exampleGame.log.smoketest.checkNativeClassSizes}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
        <arg line="${smoketest.commandLineParams.checkNativeClassSizes}"/>
     </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${exampleGame.log.smoketest.checkNativeClassSizes}.log"
      destfile = "${compileOptions.logDir}/${exampleGame.log.smoketest.checkNativeClassSizes}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${exampleGame.log.smoketest.checkNativeClassSizes}"
  />   




  </target>



  <target name="smokeTest_ut2007" depends="init"
        description="launch the game and then quit.  used to see if the game runs and also if the CHECK_NATIVE_CLASS_SIZES" >

  <echo message = "   -ut2007 smoketest" />

  <echo message = "      -ut2007 smoketest server" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.smoketest.server}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
     <arg line="${smoketest.commandLineParams.server}"/>
  </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.smoketest.server}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.smoketest.server}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.smoketest.server}"
  />   


  <echo message = "      -ut2007 smoketest checkNativeClassSizes" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.smoketest.checkNativeClassSizes}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
     <arg line="${smoketest.commandLineParams.checkNativeClassSizes}"/>
  </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${ut2007.log.smoketest.checkNativeClassSizes}.log"
      destfile = "${compileOptions.logDir}/${ut2007.log.smoketest.checkNativeClassSizes}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${ut2007.log.smoketest.checkNativeClassSizes}"
  />   

  </target>



  <target name="smokeTest_warfare" depends="init"
        description="launch the game and then quit.  used to see if the game runs and also if the CHECK_NATIVE_CLASS_SIZES" >

  <echo message = "   -warfare smoketest" />

  <echo message = "      -warfare smoketest server" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.smoketest.server}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
       <arg line="${smoketest.commandLineParams.server}"/>
    </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.smoketest.server}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.smoketest.server}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.smoketest.server}"
  />   


  <echo message = "      -warfare smoketest checkNativeClassSizes" />

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${warfare.execName}" output="${compileOptions.logDir}/${warfare.log.smoketest.checkNativeClassSizes}.log" failonerror="true" timeout="${smoketest.timeoutPeriod}" > 
       <arg line="${smoketest.commandLineParams.checkNativeClassSizes}"/>
    </exec>

  <text2xml srcfile = "${compileOptions.logDir}/${warfare.log.smoketest.checkNativeClassSizes}.log"
      destfile = "${compileOptions.logDir}/${warfare.log.smoketest.checkNativeClassSizes}_log.xml"
      element = "${compileOptions.projectName}"
      attribute = "name"
      value = "${warfare.log.smoketest.checkNativeClassSizes}"
  />   

  </target>



<!--
compile_verification_CHECK_PUREVIRTUALS
compile_verification_CHECK_NATIVE_MATCH
compile_verification_CHECK_NATIVE_CLASS_SIZES
-->
  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_CHECK_PUREVIRTUALS">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_CHECK_PUREVIRTUALS" />
  </target>


  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_CHECK_NATIVE_MATCH">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_CHECK_NATIVE_MATCH" />
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
     <antcall target="loadPackages_exampleGame" />
     <antcall target="xenonCookContent_exampleGame" />
  </target>


  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_CHECK_NATIVE_CLASS_SIZES">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_CHECK_NATIVE_CLASS_SIZES" />
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
     <antcall target="loadPackages_exampleGame" />
     <antcall target="xenonCookContent_exampleGame" />
  </target>


  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_CHECK_FINAL_RELEASE">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_FINAL_RELEASE" />
<!-- we need LTCG named .exe for these :-(
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
     <antcall target="loadPackages_exampleGame" />
     <antcall target="xenonCookContent_exampleGame" />
-->
  </target>

  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_WITHOUT_NOVODEX">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_WITHOUT_NOVODEX" />
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
     <antcall target="loadPackages_exampleGame" />
     <antcall target="xenonCookContent_exampleGame" />
  </target>


  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_WITHOUT_FACEFX">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_WITHOUT_FACEFX" />
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
     <antcall target="loadPackages_exampleGame" />
     <antcall target="xenonCookContent_exampleGame" />
  </target>


  <!-- we need to do it this way as the depends clause will get merged together -->
  <target name="UE3_USE_NULL_RHI">
     <antcall target="cleanGeneratedFiles" />
     <antcall target="compile_verification_USE_NULL_RHI" />
     <antcall target="buildDotU" />
     <antcall target="smokeTest" />
  </target>




<target name="statsViewer">

  <echo message = "   -Building StatsViewer" />

    <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}\..\Tools"
      projectfolder = "StatsViewer"
      project = "StatsViewer"
      buildmode = "Release"
      logfile = "${compileOptions.logDir}/statsViewer.log"
      failonerror = "true"
      rebuild = "true"
    />     

</target>


<target name="compilePS3TestBed">

  <echo message = "   -Building PS3TestBed" />

    <vc7 compilerfolder = "${VS_DIR}"
      projectrootfolder = "${unrealEngine3.src.dir}\PS3"
      projectfolder = "TestbedPS3"
      project = "TestbedPS3"
      buildmode = "Release"
      logfile = "${compileOptions.logDir}/TestbedPS3.log"
      failonerror = "true"
      rebuild = "true"
    />     

</target>


<!-- just run example game's sample for now -->
<target name="runPS3TestBed">

  <echo message = "   -running PS3TestBed" />

       <exec dir="${unrealEngine3.binaries.dir}\PS3" executable="${unrealEngine3.binaries.dir}\PS3\RunSmokeTestOnPS3.bat" output="..\..\AutomatedBuildFilez\PS3TestBed_debug-examplegame_sample.log" failonerror="true">
        <arg line="172.20.4.11 Testbed\TestBedPS3_debug-examplegame_sample.opt"/>
     </exec>

</target>

<!-- Implies FR -->
<target name="runBVTs_loc">

  <echo message = "   -running BVT loc" />

     <exec dir="${unrealEngine3.binaries.dir}\..\WarGame\Build\BVTs\BVTScheduler" executable="${unrealEngine3.binaries.dir}\..\WarGame\Build\BVTs\BVTScheduler\BVTScheduler.exe" failonerror="false">
        <arg line="${timestampForBVT} ${changelistBuiltFrom} ${bvt.distrib.projectFolder}"/>
     </exec>

</target>


<target name="runBVTs_locNFR">

  <echo message = "   -running BVT loc NFR" />

     <exec dir="${unrealEngine3.binaries.dir}\..\WarGame\Build\BVTs\BVTScheduler" executable="${unrealEngine3.binaries.dir}\..\WarGame\Build\BVTs\BVTScheduler\BVTScheduler.exe" failonerror="false">
        <arg line="${timestampForBVT} ${changelistBuiltFrom} ${bvt.distrib.projectFolder}"/>
     </exec>

</target>




<target name="runBVTs_english">

  <echo message = "   -running BVT english" />

     <exec dir="C:\EpicBVT\bin\Release" executable="C:\EpicBVT\bin\Release\BVT.exe" failonerror="false">
        <arg line="C:\continuousIntegration\checkout\UE3_xenonBVTBuilder ${timestampForBVT} c:\EpicBVT\MultipleXenon.txt c:\EpicBVT\epicdb.txt cookloadpush 0 int ${changelistBuiltFrom}"/>
     </exec>

</target>


<target name="runBVTsFinalRelease_english">

  <echo message = "   -running BVT english" />

     <exec dir="C:\EpicBVT\bin\Release" executable="C:\EpicBVT\bin\Release\BVT.exe" failonerror="false">
        <arg line="C:\continuousIntegration\checkout\UE3_xenonBVTFinalReleaseBuilder ${timestampForBVT}FR c:\EpicBVT\MultipleXenon.txt c:\EpicBVT\epicdb.txt cookloadpush 0 int ${changelistBuiltFrom}"/>
     </exec>

</target>




<target name="runMiniBVTs_english">

  <tstamp>
    <format property="DATE_FOR_BUILD" pattern="yyyy-MM-dd_HH.mm" locale="en"/>
  </tstamp>

  <echo message = "   -running Mini BVT english ${DATE_FOR_BUILD}" />

     <exec dir="C:\EpicBVT\bin\Release" executable="C:\EpicBVT\bin\Release\BVT.exe" failonerror="false">
        <arg line="C:\continuousIntegration\checkout\UE3_xenonMiniBVTBuilder ${DATE_FOR_BUILD} c:\EpicBVT\MultipleXenon.txt c:\EpicBVT\epicdb.txt quickload 0 int ${changelistBuiltFrom}"/>
     </exec>

</target>



<target name="benchmark_UTFPS">

  <echo message = "   -running benchmark_UTFPS ${changelistBuiltFrom}" />
<!--
for /f "tokens=3" %i in ('p4 -ztag changes -m1 -s submitted //... ^|findstr change') do echo %i
-->
     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>


     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>


     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>

     <exec dir="${unrealEngine3.binaries.dir}" executable="${unrealEngine3.binaries.dir}/${ut2007.execName}" output="${compileOptions.logDir}/${ut2007.log.benchmark.fps}.log" failonerror="false" timeout="${benchmark.timeoutPeriod}" > 
        <arg line="ctf-strident?numplay=32?timelimit=10?automatedperftesting=1 -norc -unattended"/>
     </exec>



</target>




<!-- status spam -->

 <target name="echo_buildUE3_Gemini" >
  <echo message = "*** Building Unreal Engine 3 - Gemini ***" />
 </target>

 <target name="echo_buildUE3_PC" >
  <echo message = "*** Building Unreal Engine 3 PC only ***" />
 </target>

 <target name="echo_buildUE3_PS3" >
  <echo message = "*** Building Unreal Engine 3 PS3 only ***" />
 </target>

 <target name="echo_buildUE3_PS3_smokeTest" >
  <echo message = "*** Building Unreal Engine 3 PS3 SmokeTest ***" />
 </target>

 <target name="echo_buildUE3_Xenon" >
  <echo message = "*** Building Unreal Engine 3 Xenon only ***" />
 </target>




 <target name="echo_buildUE3" >
  <echo message = "*** Building Unreal Engine 3 ***" />
 </target>

 <target name="echo_buildUE3_verification" >
  <echo message = "*** Building Unreal Engine 3 Verification ***" />
 </target>

 <target name="echo_buildDotU" >
  <echo message = "*** Building Dot U ***" />
 </target>

 <target name="echo_smokeTest" >
  <echo message = "*** Running SmokeTests ***" />
 <!-- <echo message = "  - disabled until the freezing issues are resolved" /> -->
 </target>

 <target name="echo_loadPackages" >
  <echo message = "*** Loading All Packages ***" />
 </target>


 <target name="echo_cookXenonContent" >
  <echo message = "*** Cooking Xenon Content ***" />
 </target>


 <target name="echo_ps3CookContent" >
  <echo message = "*** Cooking PS3 Content ***" />
 </target>


 <target name="echo_tools" >
  <echo message = "*** Building Tools ***" />
 </target>


 <target name="echo_runningBVTs" >
  <echo message = "*** Running BVTs ***" />
 </target>


 <target name="echo_runningMiniBVTs" >
  <echo message = "*** Running Mini BVTs ***" />
 </target>




 <target name="buildUE3_tools" depends="echo_tools, statsViewer" > <!-- , statsViewer -->
 </target>

 <target name="buildUE3_Gemini" depends="echo_buildUE3_Gemini, cleanGeneratedFiles, compilePC, loadPackages, UE3_CHECK_NATIVE_MATCH, UE3_CHECK_NATIVE_CLASS_SIZES, compileXenon, compilePS3_rebuild_example_debug" >
 </target>

 <target name="buildUE3_PC" depends="echo_buildUE3_PC, cleanGeneratedFiles, compilePC" >
 </target>

 <target name="buildUE3_PS3" depends="echo_buildUE3_PS3, cleanGeneratedFiles, compilePS3_rebuild" >
 </target>

 <target name="buildUE3_PS3_smokeTest" depends="echo_buildUE3_PS3_smokeTest, cleanGeneratedFiles, buildUE3_PC, cleanIniFiles, buildExampleGameDotU, compilePS3_rebuild_example_debug, ps3CookContent_exampleGame, compilePS3TestBed, runPS3TestBed" >
 </target>




 <target name="buildUE3_Xenon" depends="echo_buildUE3_Xenon, cleanGeneratedFiles, compileXenon" >
 </target>


 <target name="buildUE3" depends="echo_buildUE3, cleanGeneratedFiles, compilePC, buildDotU, compileXenon, compilePS3_rebuild_example_debug, buildUE3_tools" > <!-- -->
 </target>


 <target name="buildUE3_verification" depends="echo_buildUE3_verification, UE3_CHECK_PUREVIRTUALS, UE3_CHECK_NATIVE_MATCH, UE3_CHECK_NATIVE_CLASS_SIZES, UE3_CHECK_FINAL_RELEASE, UE3_WITHOUT_NOVODEX, UE3_USE_NULL_RHI, compilePS3_ProDG" >
 </target>

<!-- compileXenon_verification, , compilePS3 --> 


  <target name="buildDotU" depends="echo_buildDotU, cleanIniFiles, buildExampleGameDotU, buildUT2007DotU, buildWarfareDotU" >
  </target>

  <target name="buildDotU_SansPrivateContent" depends="echo_buildDotU, cleanIniFiles, buildExampleGameDotU, buildUT2007DotUSansPrivateContent, buildWarfareDotU" >
  </target>


 <target name="cookXenonContent" depends="echo_cookXenonContent, xenonCookContent_exampleGame, xenonCookContent_ut2007, xenonCookContent_warfare" >
 </target>

 <target name="cookXenonContentFull" depends="echo_cookXenonContent, xenonCookContent_exampleGameFull, xenonCookContent_ut2007Full, xenonCookContent_warfareFull" >
 </target>


 <target name="ps3CookContent" depends="echo_ps3CookContent, ps3CookContent_exampleGame" >
 </target>

 <target name="ps3CookContentFull" depends="echo_ps3CookContent, ps3CookContent_exampleGame" >
 </target>




 <target name="loadPackages" depends="echo_loadPackages, loadPackages_exampleGame, loadPackages_ut2007, loadPackages_warfare" >
 </target>


  <target name="smokeTest" depends="echo_smokeTest, smokeTest_exampleGame, smokeTest_ut2007, smokeTest_warfare" >
  </target>

  <target name="runXenonBVT" depends="echo_runningBVTs, runBVTs_english" > <!-- need to add the other langs here -->
  </target>

  <target name="runXenonBVTFinalRelease" depends="echo_runningBVTs, runBVTsFinalRelease_english" > <!-- need to add the other langs here -->
  </target>

  <target name="runXenonBVTLoc" depends="echo_runningBVTs, runBVTs_loc" > <!-- need to add the other langs here -->
  </target>

  <target name="runXenonBVTLocNFR" depends="echo_runningBVTs, runBVTs_locNFR" > <!-- need to add the other langs here -->
  </target>


  <target name="runXenonMiniBVT" depends="cleanGeneratedFiles, compilePC, cleanIniFiles, buildWarfareDotUBVT, compileXenon, echo_runningMiniBVTs, runMiniBVTs_english" > <!-- need to add the other langs here -->
  </target>







  <target name="UE3_benchmarkBuilder" depends="buildUE3_PC, buildDotU">
  </target>

  <target name="UE3_benchmarkDualCoreBuilder" depends="buildUE3_PC, buildDotU, smokeTest, loadPackages_exampleGame, xenonCookContent_exampleGame">
  </target>

  <target name="UE3_codeBuilder" depends="buildUE3, buildDotU, smokeTest, loadPackages_exampleGame, xenonCookContent_exampleGame, ps3CookContent_exampleGame" >
  </target>

  <target name="UE3_codeBuilderGemini" depends="buildUE3_Gemini, buildDotU, smokeTest, loadPackages_exampleGame, xenonCookContent_exampleGame, ps3CookContent_exampleGame" >
  </target>

  <target name="UE3_codeBuilderPC" depends="buildUE3_PC, buildDotU, smokeTest, loadPackages_exampleGame, xenonCookContent_exampleGame, ps3CookContent_exampleGame" >
  </target>

  <target name="UE3_codeBuilderPS3" depends="buildUE3_PS3" >
  </target>

  <target name="UE3_codeBuilderPS3_SmokeTest" depends="buildUE3_PS3_smokeTest" >
  </target>

  <target name="UE3_codeBuilderXenon" depends="buildUE3_Xenon" >
  </target>


  <target name="UE3_contentBuilder" depends="buildUE3_PC, buildDotU, loadPackages, cookXenonContent, ps3CookContent">
  </target>

  <target name="UE3_dailyBuilder" depends="buildUE3_PC, buildUE3_PS3, buildUE3_Xenon, compile_verification_FINAL_RELEASE, buildDotU, smokeTest, loadPackages, cookXenonContentFull, ps3CookContentFull">
  </target>


  <target name="UE3_sansBuilderFaceFX" depends="UE3_WITHOUT_FACEFX" >
  </target>


  <target name="UE3_sansBuilderPS3" depends="buildUE3_PC, buildDotU">
  </target>


  <target name="UE3_sansBuilderUTPrivate" depends="buildUE3_PC, buildDotU_SansPrivateContent, loadPackages_exampleGame, loadPackages_ut2007">
  </target>


  <target name="UE3_xenonBVTBuilder" depends="runXenonBVT" >
  </target>

  <target name="UE3_xenonBVTFinalReleaseBuilder" depends="runXenonBVTFinalRelease" >
  </target>

  <target name="UE3_xenonMiniBVTBuilder" depends="runXenonMiniBVT" >
  </target>

  <target name="UE3_xenonBVTLocBuilder" depends="runXenonBVTLoc" >
  </target>

  <target name="UE3_xenonBVTLocNFRBuilder" depends="runXenonBVTLocNFR" >
  </target>

  <target name="UE3_verificationBuilder" depends="buildUE3_verification" >
  </target>

  <target name="UE3_benchmarkUTFPSBuilder" depends="benchmark_UTFPS" >  <!-- buildUE3_PC, buildDotU, smokeTest, -->
  </target>






  <target name="UE3BuildTypes">
    <echo message = "***********************" />
    <echo message = "*** UE3 Build types ***" />
    <echo message = "***********************" />
    <echo message = "" />

    <echo message = "  -UE3_benchmarkBuilder" />
    <echo message = "  -UE3_codeBuilder" />
    <echo message = "  -UE3_codeBuilderPC" />
    <echo message = "  -UE3_codeBuilderPS3" />
    <echo message = "  -UE3_contentBuilder" />
    <echo message = "  -UE3_dailyBuilder" />
    <echo message = "  -UE3_sansBuilderPS3" />
    <echo message = "  -UE3_sansBuilderUTPrivate" />
    <echo message = "  -UE3_xenonBVTBuilder" />
    <echo message = "  -UE3_xenonMiniBVTBuilder" />
    <echo message = "  -UE3_verificationBuilder" />
    <echo message = "  -UE3_benchmarkUTFPSBuilder" />

    <echo message = "timestampForBVT=${timestampForBVT}" />

  </target>



</project>
