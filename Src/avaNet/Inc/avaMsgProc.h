/***

	Copyright (c) 2006 Redduck Inc. All rights reserved.

	Project: avaNet

	Name: avaMsgProc.h

	Description: Message processors.

***/

#ifndef __AVAMSGPROC_H__
#define __AVAMSGPROC_H__


#include "ComDef/Def.h"
using namespace Def;

#include "ComDef/MsgDef.h"


#define DECLARE_MSG_PROC(m) namespace m { void Proc(_LPMSGBUF pData); };

namespace PM
{
	namespace CLIENT
	{
		DECLARE_MSG_PROC(CONNECT_ANS)
		DECLARE_MSG_PROC(CHECK_NICK_ANS)
		DECLARE_MSG_PROC(PLAYER_INFO_NTF)
		DECLARE_MSG_PROC(PLAYER_ITEM_INFO_NTF)
		DECLARE_MSG_PROC(PLAYER_AWARD_INFO_NTF)
		DECLARE_MSG_PROC(PLAYER_GUILD_INFO_NTF)
		DECLARE_MSG_PROC(PLAYER_GUILD_ADDR_NTF)
		DECLARE_MSG_PROC(CREATE_ACCOUNT_ANS)
		DECLARE_MSG_PROC(MAIN_NOTICE_NTF)
		DECLARE_MSG_PROC(KICK_NTF)
		DECLARE_MSG_PROC(GUILD_CONNECT_ANS)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace CHANNEL
	{
		DECLARE_MSG_PROC(CHANNEL_LIST_ANS)
		DECLARE_MSG_PROC(CHANNEL_JOIN_ANS)
		DECLARE_MSG_PROC(CHANNEL_LEAVE_ANS)

		DECLARE_MSG_PROC(ROOM_LIST_ANS)
		DECLARE_MSG_PROC(ROOM_LIST_NTF)
		DECLARE_MSG_PROC(ROOM_INFO_ANS)

		DECLARE_MSG_PROC(PLAYER_LIST_ANS)
		DECLARE_MSG_PROC(PLAYER_LIST_NTF)
		DECLARE_MSG_PROC(PLAYER_INFO_ANS)
		DECLARE_MSG_PROC(PLAYER_LOCATION_ANS)
		DECLARE_MSG_PROC(FOLLOW_PLAYER_ANS)

		DECLARE_MSG_PROC(LOBBY_JOIN_NTF)
		DECLARE_MSG_PROC(LOBBY_LEAVE_NTF)

		DECLARE_MSG_PROC(LOBBY_CHAT_NTF)
		DECLARE_MSG_PROC(WHISPER_NTF)

		DECLARE_MSG_PROC(ROOM_UPDATE_STATE_NTF)
		DECLARE_MSG_PROC(ROOM_UPDATE_SETTING_NTF)

//#ifdef _SERVER_PUSH
		DECLARE_MSG_PROC(ROOM_LIST_DIFF_NTF)
		DECLARE_MSG_PROC(PLAYER_LIST_DIFF_NTF)
//#else
		DECLARE_MSG_PROC(ROOM_CREATE_NTF)		
		DECLARE_MSG_PROC(ROOM_DELETE_NTF)
//#endif

		DECLARE_MSG_PROC(CHANNEL_DESC_NTF)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace ROOM
	{
		DECLARE_MSG_PROC(CREATE_ANS)
		DECLARE_MSG_PROC(JOIN_ANS)
		DECLARE_MSG_PROC(JOIN_NTF)
		DECLARE_MSG_PROC(INFO_ANS)
		DECLARE_MSG_PROC(LEAVE_ANS)
		DECLARE_MSG_PROC(LEAVE_NTF)
		DECLARE_MSG_PROC(CHAT_NTF)
		DECLARE_MSG_PROC(PLAYER_INFO_ANS)
		DECLARE_MSG_PROC(CHANGE_HOST_NTF)
		DECLARE_MSG_PROC(KICK_PLAYER_NTF)
		DECLARE_MSG_PROC(CHANGE_SETTING_ANS)
		DECLARE_MSG_PROC(CHANGE_SETTING_NTF)
		DECLARE_MSG_PROC(CHANGE_STATE_NTF)
		DECLARE_MSG_PROC(READY_NTF)
		DECLARE_MSG_PROC(CHANGE_SLOT_NTF)
		DECLARE_MSG_PROC(CHANGE_CLASS_NTF)
		DECLARE_MSG_PROC(CHANGE_WEAPON_NTF)
		DECLARE_MSG_PROC(RTT_UPDATE_NTF)
		DECLARE_MSG_PROC(SET_RTTTEST_ADDR_NTF)
		DECLARE_MSG_PROC(SET_HOSTADDR_NTF)
		DECLARE_MSG_PROC(RTTT_START_ANS)
		DECLARE_MSG_PROC(RTTT_START_NTF)
		DECLARE_MSG_PROC(DESTROY_NTF)
		DECLARE_MSG_PROC(QUICK_JOIN_ANS)
		DECLARE_MSG_PROC(REPOSITION_NTF)
		DECLARE_MSG_PROC(HOST_RATING_NTF)
		DECLARE_MSG_PROC(ITEM_REPAIR_NTF)
		DECLARE_MSG_PROC(CLAN_INFO_NTF)
		DECLARE_MSG_PROC(UPDATE_PCBANG_NTF)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace GAME
	{
		DECLARE_MSG_PROC(START_NTF)
		DECLARE_MSG_PROC(READY_NTF)
		DECLARE_MSG_PROC(JOIN_NTF)
		DECLARE_MSG_PROC(START_COUNT_NTF)
		DECLARE_MSG_PROC(CANCEL_COUNT_NTF)
		DECLARE_MSG_PROC(UPDATE_SCORE_NTF)
		DECLARE_MSG_PROC(LOADING_PROGRESS_NTF)
		DECLARE_MSG_PROC(LEAVE_NTF)
		DECLARE_MSG_PROC(SKILL_UPDATE_NTF)
		DECLARE_MSG_PROC(RESULT_UPDATE_NTF)
		DECLARE_MSG_PROC(AWARD_UPDATE_NTF)
		DECLARE_MSG_PROC(ITEM_UPDATE_NTF)
		DECLARE_MSG_PROC(RESULT_NTF)
		DECLARE_MSG_PROC(CHAT_NTF)
		DECLARE_MSG_PROC(REPORT_VOTE_NTF)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace INVENTORY
	{
		DECLARE_MSG_PROC(EQUIPSET_ANS)
		DECLARE_MSG_PROC(WEAPONSET_ANS)
		DECLARE_MSG_PROC(CUSTOMSET_ANS)
		DECLARE_MSG_PROC(ITEM_BUY_ANS)
		DECLARE_MSG_PROC(ITEM_GIFT_ANS)
		DECLARE_MSG_PROC(REPAIR_ANS)
		DECLARE_MSG_PROC(CONVERT_RIS_ANS)
		DECLARE_MSG_PROC(ITEM_REFUND_ANS)
		DECLARE_MSG_PROC(ITEM_DELETE_NTF)
		DECLARE_MSG_PROC(UPDATE_GAUGE_NTF)
		DECLARE_MSG_PROC(CASHITEM_BUY_ANS)
		DECLARE_MSG_PROC(EFFSET_ANS)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace ADMIN
	{
		DECLARE_MSG_PROC(SET_VISIBILITY_ANS)
		DECLARE_MSG_PROC(NOTICE_NTF)
		DECLARE_MSG_PROC(KICK_ANS)
		DECLARE_MSG_PROC(KICK_NTF)
		DECLARE_MSG_PROC(CHATOFF_ANS)
		DECLARE_MSG_PROC(CHATOFF_NTF)
		DECLARE_MSG_PROC(CHANGE_ROOMNAME_ANS)
		DECLARE_MSG_PROC(CHANGE_ROOMNAME_NTF)
		DECLARE_MSG_PROC(SET_TICKER_ANS)
		DECLARE_MSG_PROC(SET_MAINNOTICE_ANS)
		DECLARE_MSG_PROC(WHISPER_NTF)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}

	namespace GUILD
	{
		DECLARE_MSG_PROC(INFO_NTF)
		DECLARE_MSG_PROC(MEMBER_LIST_NTF)
		DECLARE_MSG_PROC(LOBBY_JOIN_ANS)
		DECLARE_MSG_PROC(LOBBY_JOIN_NTF)
		DECLARE_MSG_PROC(LOBBY_LEAVE_ANS)
		DECLARE_MSG_PROC(LOBBY_LEAVE_NTF)
		DECLARE_MSG_PROC(LOBBY_CHAT_NTF)
		DECLARE_MSG_PROC(SET_MOTD_ANS)
		DECLARE_MSG_PROC(MOTD_NTF)
		DECLARE_MSG_PROC(CHAT_NTF)
		DECLARE_MSG_PROC(PLAYER_INFO_ANS)
		DECLARE_MSG_PROC(WHISPER_NTF)
		DECLARE_MSG_PROC(NOTICE_NTF)
		DECLARE_MSG_PROC(LOGIN_NTF)
		DECLARE_MSG_PROC(LOGOUT_NTF)
		DECLARE_MSG_PROC(JOIN_NTF)
		DECLARE_MSG_PROC(LEAVE_NTF)
		DECLARE_MSG_PROC(KICK_NTF)
		DECLARE_MSG_PROC(GRANTGRADE_NTF)
		DECLARE_MSG_PROC(ENTRUST_MASTER_NTF)
		DECLARE_MSG_PROC(GET_CHANNEL_ADDR_ANS)
		//DECLARE_MSG_PROC(UPDATEINFO_NTF)
		DECLARE_MSG_PROC(SCORE_UPDATE_NTF)
		DECLARE_MSG_PROC(NICKNAME_UPDATE_NTF)
		DECLARE_MSG_PROC(CLANNAME_UPDATE_NTF)
		DECLARE_MSG_PROC(PLAYER_LOCATION_ANS)

		void Proc(_LPMSGBUF pData);
		void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
	}


	namespace NONE
	{
		DECLARE_MSG_PROC(NONE)
	}


	void Proc(_LPMSGBUF pData);
	void ProcTimeOut(const BYTE *Buffer, INT BufferLen);
}



#define CASE_MSG_PROC(name)									\
	case ID_##name:											\
		_LOG(TEXT("[%s] Received."), name::DEF::MsgName());	\
		name::Proc(pData);									\
		break;


#define CASE_MSG_TIMEOUT_PROC(cat, id, name)								\
	case ID_##name:															\
		_LOG(TEXT("[%s] Timed out."), name::DEF::MsgName());				\
		GetAvaNetHandler()->ProcMessage(EMsg_##cat, EMsg_##cat##_##id, TEXT("time out"), TEXT(""), 0, 0);	\
		break;


#define CHECK_PENDING_MSG(_MSG, m)												\
	{																			\
		FPendingMsg *pMsg = GavaNetClient->PendingMsgs.Find(_MSG::ID);			\
		if (!pMsg) return;														\
		m = (_LPMSGBUF)(pMsg->pMsg);											\
		GavaNetClient->PendingMsgs.Remove(_MSG::ID);							\
	}


#define CHECK_AND_DELETE_PENDING_MSG(_MSG)										\
	{																			\
		FPendingMsg *pMsg = GavaNetClient->PendingMsgs.Find(_MSG::ID);			\
		if (!pMsg) return;														\
		((_LPMSGBUF)(pMsg->pMsg))->Delete();									\
		GavaNetClient->PendingMsgs.Remove(_MSG::ID);							\
	}


#endif

