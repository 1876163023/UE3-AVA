/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum CashItemEffectType
{
    CASHITEMEFFECT_All      =0,
    CASHITEMEFFECT_HotAndNew=1,
    CASHITEMEFFECT_Xp       =2,
    CASHITEMEFFECT_Supply   =3,
    CASHITEMEFFECT_Money    =4,
    CASHITEMEFFECT_MAX      =5,
};
enum EPlayerInfoCategory
{
    PLAYERINFOCAT_Waiting   =0,
    PLAYERINFOCAT_Buddy     =1,
    PLAYERINFOCAT_Block     =2,
    PLAYERINFOCAT_Clan      =3,
    PLAYERINFOCAT_MAX       =4,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName AVAGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AddChildPositionChangeNotify)
AUTOGENERATE_NAME(RemoveChildPositionChangeNotify)

#ifndef NAMES_ONLY

class UavaUIParamDataProvider : public UUIDataProvider
{
public:
    //## BEGIN PROPS avaUIParamDataProvider
    FStringNoInit FieldDelimiter;
    //## END PROPS avaUIParamDataProvider

    DECLARE_ABSTRACT_CLASS(UavaUIParamDataProvider,UUIDataProvider,0|CLASS_Transient,avaGame)
public:
	/** 
	 * 설정 가능한 파라메터 이름을 얻어온다
	 */
	void GetSupportedParameterNames( TArray<FName>& OutPropertyNames );

	/** 
	 * 설정 가능한 프로퍼티들을 얻어온다
	 */
	void GetSupportedParameterProps( TArray<UProperty*>& OutProperties );
	
	/**
	 * 파라메터들을 초기화한다
	 *
	 * @param	bUseDefault		0이나 ""로 초기화하는대신 DefaultObject의 값을 얻어와 쓴다.
	 */
	void ClearParameters( UBOOL bUseDefault = TRUE );

	/** 
	 * FieldName에 지정된 파라메터를 읽어들임
	 *
	 * @return 업데이트로 파라메터 값이 변했는지의 여부
	 */
	UBOOL UpdateParameters( FString& FieldStr, UBOOL bCutOffParamStr = TRUE );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged ) { }

protected:

	typedef TMap<FName,FString> NameValueMapType;

	/** 
	 * 읽어들여온 FieldName에서 파라메터부분을 추출
	 *
	 */
	void ParseParameter( FString& FieldName, FString& ParameterStr, NameValueMapType& NameValueMap );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see ParseDataStoreReference for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetFieldValue( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE )
	{
		FString FieldStr = FieldName;
		UpdateParameters( FieldStr );
		return GetField( FieldStr, out_FieldValue, ArrayIndex );
	}

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see ParseDataStoreReference for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE ) { PURE_VIRTUAL(UavaUIParamDataProvider::GetField,return FALSE;) };
};

class UUIDataProvider_AvaNetCashItemDurability : public UavaUIParamDataProvider, public IUIListElementCellProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetCashItemDurability
    INT SelectedShopItemListIndex;
    INT DurabilityListIndex;
    //## END PROPS UIDataProvider_AvaNetCashItemDurability

    DECLARE_CLASS(UUIDataProvider_AvaNetCashItemDurability,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }
};

class UUIDataProvider_AvaNetCashItemInventory : public UavaUIParamDataProvider, public IUIListElementCellProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetCashItemInventory
    BYTE CurrentEffectType;
    INT SelectedItemListIndex;
    //## END PROPS UIDataProvider_AvaNetCashItemInventory

    DECLARE_CLASS(UUIDataProvider_AvaNetCashItemInventory,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
/* === IUIListElement interface === */

	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }
};

class UUIDataProvider_AvaNetCashItemPopup : public UavaUIParamDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetCashItemPopup
    INT SelectedItemListIndex;
    INT DurabilityListIndex;
    FStringNoInit Result;
    FStringNoInit ItemType;
    INT EquipSlot;
    INT InvenSlot;
    BITFIELD bBuyCashItemRequestTrigger:1;
    BITFIELD bGiftCashItemRequestTrigger:1;
    BITFIELD bChargeCashRequestTrigger:1;
    BITFIELD bUseRequestTrigger:1;
    BITFIELD bEquipRequestTrigger:1;
    //## END PROPS UIDataProvider_AvaNetCashItemPopup

    DECLARE_CLASS(UUIDataProvider_AvaNetCashItemPopup,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );
};

class UUIDataProvider_AvaNetCashItems : public UavaUIParamDataProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetCashItems
    INT SelectedInvenItemListIndex;
    BITFIELD bUseCashItemTrigger:1;
    BITFIELD bBuyCashItemTrigger:1;
    BITFIELD bGiveCashItemTrigger:1;
    BITFIELD bTakeCashItemTrigger:1;
    BITFIELD bChargeCashTrigger:1;
    BITFIELD bGetCashTrigger:1;
    //## END PROPS UIDataProvider_AvaNetCashItems

    DECLARE_CLASS(UUIDataProvider_AvaNetCashItems,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return GetElementCellSchemaProvider(FieldName); }


/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * Resolves the value of the data field specified and stores the value specified to the appropriate location for that field.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	FieldValue		the value to store for the property specified.
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL SetFieldValue( const FString& FieldName, const struct FUIProviderScriptFieldValue& FieldValue, INT ArrayIndex=INDEX_NONE );
};

class UUIDataProvider_AvaNetCashItemShop : public UavaUIParamDataProvider, public IUIListElementCellProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetCashItemShop
    BYTE CurrentEffectType;
    INT SelectedItemListIndex;
    INT DurabilityListIndex;
    //## END PROPS UIDataProvider_AvaNetCashItemShop

    DECLARE_CLASS(UUIDataProvider_AvaNetCashItemShop,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
/* === IUIListElement interface === */

	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }
};

class UUIDataProvider_AvaNetLastGameResult : public UavaUIParamDataProvider, public IUIListElementProvider, public IUIListElementCellProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetLastGameResult
    //## END PROPS UIDataProvider_AvaNetLastGameResult

    DECLARE_CLASS(UUIDataProvider_AvaNetLastGameResult,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }


/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );
};

class UUIDataProvider_AvaNetMainNavigation : public UavaUIParamDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetMainNavigation
    //## END PROPS UIDataProvider_AvaNetMainNavigation

    DECLARE_CLASS(UUIDataProvider_AvaNetMainNavigation,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * TargetWidget을 업데이트 (활성/비활성화, 숨김/보임, 체크/체크해제 등등)
	 *
	 * @param	bVisible - 이 데이터 프로바이더를 사용하는 Owner가 보이거나 숨겨져야함을 가리킨다.
	 *
	 * @return
	 */
	void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );
};

class UUIDataProvider_AvaNetMyPlayer : public UavaUIParamDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetMyPlayer
    //## END PROPS UIDataProvider_AvaNetMyPlayer

    DECLARE_CLASS(UUIDataProvider_AvaNetMyPlayer,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetFieldValue( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * TargetWidget을 업데이트 (활성/비활성화, 숨김/보임, 체크/체크해제 등등)
	 */
	void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );
};

class UUIDataProvider_AvaNetOptionSettings : public UavaUIParamDataProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetOptionSettings
    //## END PROPS UIDataProvider_AvaNetOptionSettings

    DECLARE_CLASS(UUIDataProvider_AvaNetOptionSettings,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return GetElementCellSchemaProvider(FieldName); }


/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * Resolves the value of the data field specified and stores the value specified to the appropriate location for that field.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	FieldValue		the value to store for the property specified.
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL SetFieldValue( const FString& FieldName, const struct FUIProviderScriptFieldValue& FieldValue, INT ArrayIndex=INDEX_NONE );
};

class UUIDataProvider_AvaNetPlayerInfo : public UavaUIParamDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetPlayerInfo
    INT ListIndex;
    BITFIELD bWaiting:1;
    BITFIELD bBuddy:1;
    BITFIELD bBlock:1;
    BITFIELD bClan:1;
    BITFIELD bMyPlayer:1;
    BITFIELD bOtherPlayer:1;
    BITFIELD bBuddyPlayer:1;
    BITFIELD bBlockPlayer:1;
    BITFIELD bMyClanPlayer:1;
    BITFIELD bOtherClanPlayer:1;
    BYTE PlayerInfoCat GCC_BITFIELD_MAGIC;
    INT AccountID;
    //## END PROPS UIDataProvider_AvaNetPlayerInfo

    DECLARE_CLASS(UUIDataProvider_AvaNetPlayerInfo,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

	/**
	 * TargetWidget을 업데이트 (활성/비활성화, 숨김/보임, 체크/체크해제 등등)
	 */
	void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );
};

class UUIDataProvider_AvaNetReadyRoom : public UavaUIParamDataProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetReadyRoom
    //## END PROPS UIDataProvider_AvaNetReadyRoom

    DECLARE_CLASS(UUIDataProvider_AvaNetReadyRoom,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged ) {}

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * TargetWidget을 업데이트 (활성/비활성화, 숨김/보임, 체크/체크해제 등등)
	 *
	 * @param	bVisible - 이 데이터 프로바이더를 사용하는 Owner가 보이거나 숨겨져야함을 가리킨다.
	 *
	 * @return
	 */
	void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );
};

class UUIDataProvider_AvaNetReadyRoomPlayers : public UavaUIParamDataProvider, public IUIListElementCellProvider, public IUIListElementProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetReadyRoomPlayers
    //## END PROPS UIDataProvider_AvaNetReadyRoomPlayers

    DECLARE_CLASS(UUIDataProvider_AvaNetReadyRoomPlayers,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
	/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex/*=INDEX_NONE*/ );

/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * TargetWidget을 업데이트 (활성/비활성화, 숨김/보임, 체크/체크해제 등등)
	 */
	virtual void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );
};

class UUIDataProvider_AvaNetRoomSettings : public UavaUIParamDataProvider, public IUIListElementProvider, public IUIListElementCellProvider
{
public:
    //## BEGIN PROPS UIDataProvider_AvaNetRoomSettings
    FStringNoInit RoomName;
    FStringNoInit RoomPassword;
    INT PreviousMissionType;
    INT SelectedMissionType;
    BITFIELD bLoadRoomSetting:1;
    BITFIELD bSettingChangeRequest:1;
    //## END PROPS UIDataProvider_AvaNetRoomSettings

    DECLARE_CLASS(UUIDataProvider_AvaNetRoomSettings,UavaUIParamDataProvider,0|CLASS_Transient,avaGame)
    virtual UObject* GetUObjectInterfaceUIListElementProvider(){return this;}
    virtual UObject* GetUObjectInterfaceUIListElementCellProvider(){return this;}
	/**
	 * Retrieves the list of tags that can be bound to individual cells in a single list element.
	 *
	 * @param	out_CellTags	receives the list of tag/column headers that can be bound to element cells for the specified property.
	 */
	virtual void GetElementCellTags( TMap<FName,FString>& out_CellTags );

	/**
	 * Retrieves the field type for the specified cell.
	 *
	 * @param	CellTag				the tag for the element cell to get the field type for
	 * @param	out_CellFieldType	receives the field type for the specified cell; should be a EUIDataProviderFieldType value.
	 *
	 * @return	TRUE if this element cell provider contains a cell with the specified tag, and out_CellFieldType was changed.
	 */
	virtual UBOOL GetCellFieldType( const FName& CellTag, BYTE& out_CellFieldType )
	{
		//@fixme joeg - implement this
		out_CellFieldType = DATATYPE_Property;
		return TRUE;
	}

	/**
	 * Resolves the value of the cell specified by CellTag and stores it in the output parameter.
	 *
	 * @param	CellTag			the tag for the element cell to resolve the value for
	 * @param	ListIndex		the UIList's item index for the element that contains this cell.  Useful for data providers which
	 *							do not provide unique UIListElement objects for each element.
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with cell tags that represent data collections.  Corresponds to the
	 *							ArrayIndex of the collection that this cell is bound to, or INDEX_NONE if CellTag does not correspond
	 *							to a data collection.
	 */
	virtual UBOOL GetCellFieldValue( const FName& CellTag, INT ListIndex, FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

/* === IUIListElement interface === */

	/**
	 * Retrieves the list of all data tags contained by this element provider which correspond to list element data.
	 *
	 * @return	the list of tags supported by this element provider which correspond to list element data.
	 */
	virtual TArray<FName> GetElementProviderTags() { TArray<FName> OutProviderTags; return OutProviderTags; }

	virtual INT GetElementCount( FName FieldName ) { return 1; }

	virtual UBOOL GetListElements( FName FieldName, TArray<INT>& out_Elements );

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellSchemaProvider( FName FieldName ) { return this; }

	virtual TScriptInterface<class IUIListElementCellProvider> GetElementCellValueProvider( FName FieldName, INT ListIndex ) { return this; }


/* === UIDataProvider interface === */

	/**
	 * Gets the list of data fields exposed by this data provider.
	 *
	 * @param	out_Fields	will be filled in with the list of tags which can be used to access data in this data provider.
	 *						Will call GetScriptDataTags to allow script-only child classes to add to this list.
	 */
	virtual void GetSupportedDataFields( TArray<struct FUIDataProviderField>& out_Fields );

	/**
	 * 파라메터들을 모두 업데이트 한후에 필요한 처리가 있다면 추가
	 * 예) 무기 인벤토리의 리스트 인덱스를 파라메터로 받았음 -(PostUpdateParamters)-> ItemID를 계산한다
	 */
	virtual void PostUpdateParamters( UBOOL bParmChanged );

	/**
	 * Resolves the value of the data field specified and stores it in the output parameter.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	out_FieldValue	receives the resolved value for the property specified.
	 *							@see GetDataStoreValue for additional notes
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL GetField( const FString& FieldName, struct FUIProviderFieldValue& out_FieldValue, INT ArrayIndex=INDEX_NONE );

	/**
	 * Resolves the value of the data field specified and stores the value specified to the appropriate location for that field.
	 *
	 * @param	FieldName		the data field to resolve the value for;  guaranteed to correspond to a property that this provider
	 *							can resolve the value for (i.e. not a tag corresponding to an internal provider, etc.)
	 * @param	FieldValue		the value to store for the property specified.
	 * @param	ArrayIndex		optional array index for use with data collections
	 */
	virtual UBOOL SetFieldValue( const FString& FieldName, const struct FUIProviderScriptFieldValue& FieldValue, INT ArrayIndex=INDEX_NONE );

	virtual void UpdateWidget( const FString& FieldName, UUIObject* TargetWidget );

protected:
	/** Lobby - Load Default Settings / ReadyRoom - Load Current Settings */
	void LoadRoomSettings();
	/** Lobby - Send a Request Creating ReadyRoom / ReadyRoom - Send a Request Changing Setting */
	void SendChangedRequest();
};

class UavaUIFloatingPanel : public UUIPanel
{
public:
    //## BEGIN PROPS avaUIFloatingPanel
    class UClass* StateClassToDetach;
    //## END PROPS avaUIFloatingPanel

    DECLARE_CLASS(UavaUIFloatingPanel,UUIPanel,0,avaGame)
	/* == UIScreenObject Interfaces == */
	/**
	 * Iterates through the DefaultStates array checking that InactiveStates contains at least one instance of each
	 * DefaultState.  If no instances are found, one is created and added to the InactiveStates array.
	 */
	virtual void CreateDefaultStates();

	/* == UIObject Interfaces == */
	/**
	 * Called immediately after a child has been added to this screen object.
	 *
	 * @param	WidgetOwner		the screen object that the NewChild was added as a child for
	 * @param	NewChild		the widget that was added
	 */
	virtual void NotifyAddedChild( UUIScreenObject* WidgetOwner, UUIObject* NewChild );

	/**
	 * Called immediately after a child has been removed from this screen object.
	 *
	 * @param	WidgetOwner		the screen object that the widget was removed from.
	 * @param	OldChild		the widget that was removed
	 * @param	ExclusionSet	used to indicate that multiple widgets are being removed in one batch; useful for preventing references
	 *							between the widgets being removed from being severed.
	 */
	virtual void NotifyRemovedChild( UUIScreenObject* WidgetOwner, UUIObject* OldChild, TArray<UUIObject*>* ExclusionSet=NULL );
};

struct FUIOutfitCell
{
    FLOAT Extent[2];
    BYTE Alignment[2];
    BITFIELD bCollapse:1 GCC_BITFIELD_MAGIC;
    TArrayNoInit<class UUIScreenObject*> AttachedUIObject;
    FLOAT Position[4];

    /** Constructors */
    FUIOutfitCell() {}
    FUIOutfitCell(EEventParm)
    {
        appMemzero(this, sizeof(FUIOutfitCell));
    }
};

struct FUIOutfitElement
{
    TArrayNoInit<struct FUIOutfitCell> Cells;

    /** Constructors */
    FUIOutfitElement() {}
    FUIOutfitElement(EEventParm)
    {
        appMemzero(this, sizeof(FUIOutfitElement));
    }
};

struct avaUIOutfitter_eventRemoveChildPositionChangeNotify_Parms
{
    class UUIScreenObject* NewAttached;
    avaUIOutfitter_eventRemoveChildPositionChangeNotify_Parms(EEventParm)
    {
    }
};
struct avaUIOutfitter_eventAddChildPositionChangeNotify_Parms
{
    class UUIScreenObject* NewAttached;
    avaUIOutfitter_eventAddChildPositionChangeNotify_Parms(EEventParm)
    {
    }
};
class UavaUIOutfitter : public UUIPanel, public IUIDataStoreSubscriber
{
public:
    //## BEGIN PROPS avaUIOutfitter
    TArrayNoInit<struct FUIOutfitElement> OutfitElements;
    BITFIELD bFitCollapsed:1;
    BITFIELD bRecalcCellPosition:1;
    BITFIELD bReposAttached:1;
    //## END PROPS avaUIOutfitter

    virtual void SetDataStoreBinding(const FString& MarkupText,INT BindingIndex=-1);
    virtual FString GetDataStoreBinding(INT BindingIndex=-1) const;
    virtual UBOOL RefreshSubscriberValue(INT BindingIndex=-1);
    virtual void GetBoundDataStores(TArray<class UUIDataStore*>& out_BoundDataStores);
    virtual void ClearBoundDataStores();
    void OnAttachRepositioned(class UUIScreenObject* Sender);
    DECLARE_FUNCTION(execSetDataStoreBinding)
    {
        P_GET_STR(MarkupText);
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        SetDataStoreBinding(MarkupText,BindingIndex);
    }
    DECLARE_FUNCTION(execGetDataStoreBinding)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(FString*)Result=GetDataStoreBinding(BindingIndex);
    }
    DECLARE_FUNCTION(execRefreshSubscriberValue)
    {
        P_GET_INT_OPTX(BindingIndex,-1);
        P_FINISH;
        *(UBOOL*)Result=RefreshSubscriberValue(BindingIndex);
    }
    DECLARE_FUNCTION(execGetBoundDataStores)
    {
        P_GET_TARRAY_REF(class UUIDataStore*,out_BoundDataStores);
        P_FINISH;
        GetBoundDataStores(out_BoundDataStores);
    }
    DECLARE_FUNCTION(execClearBoundDataStores)
    {
        P_FINISH;
        ClearBoundDataStores();
    }
    DECLARE_FUNCTION(execOnAttachRepositioned)
    {
        P_GET_OBJECT(UUIScreenObject,Sender);
        P_FINISH;
        OnAttachRepositioned(Sender);
    }
    void eventRemoveChildPositionChangeNotify(class UUIScreenObject* NewAttached)
    {
        avaUIOutfitter_eventRemoveChildPositionChangeNotify_Parms Parms(EC_EventParm);
        Parms.NewAttached=NewAttached;
        ProcessEvent(FindFunctionChecked(AVAGAME_RemoveChildPositionChangeNotify),&Parms);
    }
    void eventAddChildPositionChangeNotify(class UUIScreenObject* NewAttached)
    {
        avaUIOutfitter_eventAddChildPositionChangeNotify_Parms Parms(EC_EventParm);
        Parms.NewAttached=NewAttached;
        ProcessEvent(FindFunctionChecked(AVAGAME_AddChildPositionChangeNotify),&Parms);
    }
    DECLARE_CLASS(UavaUIOutfitter,UUIPanel,0,avaGame)
    virtual UObject* GetUObjectInterfaceUIDataStoreSubscriber(){return this;}
	/* === UUIScreenObject interface === */
	/**
	 * Perform all initialization for this widget. Called on all widgets when a scene is opened,
	 * once the scene has been completely initialized.
	 * For widgets added at runtime, called after the widget has been inserted into its parent's
	 * list of children.
	 *
	 * @param	inOwnerScene	the scene to add this widget to.
	 * @param	inOwner			the container widget that will contain this widget.  Will be NULL if the widget
	 *							is being added to the scene's list of children.
	 */
	virtual void Initialize( UUIScene* inOwnerScene, UUIObject* inOwner=NULL );

	/* === UUIObject interface === */

	/**
	 * Adds the specified face to the DockingStack for the specified widget
	 *
	 * @param	DockingStack	the docking stack to add this docking node to.  Generally the scene's DockingStack.
	 * @param	Face			the face that should be added
	 *
	 * @return	TRUE if a docking node was added to the scene's DockingStack for the specified face, or if a docking node already
	 *			existed in the stack for the specified face of this widget.
	 */
	virtual UBOOL AddDockingNode( TArray<struct FUIDockingNode>& DockingStack, EUIWidgetFace Face );

	/**
	 * Evalutes the Position value for the specified face into an actual pixel value.  Should only be
	 * called from UIScene::ResolvePositions.  Any special-case positioning should be done in this function.
	 *
	 * @param	Face	the face that should be resolved
	 */
	virtual void ResolveFacePosition( EUIWidgetFace Face );

protected:
	/**
	 * Marks the Position for any faces dependent on the specified face, in this widget or its children,
	 * as out of sync with the corresponding RenderBounds.
	 *
	 * @param	Face	the face to modify; value must be one of the EUIWidgetFace values.
	 */
	virtual void InvalidatePositionDependencies( BYTE Face );

public:
	/**
	 * Render this widget.
	 *
	 * @param	Canvas	the FCanvas to use for rendering this widget
	 */
	virtual void Render_Widget( FCanvas* Canvas );

	/**
	 * Called when a property is modified that could potentially affect the widget's position onscreen.
	 */
	virtual void RefreshPosition();

	/**
	 * Changes this widget's position to the specified value.  This version changes the default value for the bClampValues parameter to TRUE
	 *
	 * @param	LeftFace		the value (in pixels or percentage) to set the left face to
	 * @param	TopFace			the value (in pixels or percentage) to set the top face to
	 * @param	RightFace		the value (in pixels or percentage) to set the right face to
	 * @param	BottomFace		the value (in pixels or percentage) to set the bottom face to
	 * @param	InputType		indicates the format of the input value.  All values will be evaluated as this type.
	 *								EVALPOS_None:
	 *									NewValue will be considered to be in whichever format is configured as the ScaleType for the specified face
	 *								EVALPOS_PercentageOwner:
	 *								EVALPOS_PercentageScene:
	 *								EVALPOS_PercentageViewport:
	 *									Indicates that NewValue is a value between 0.0 and 1.0, which represents the percentage of the corresponding
	 *									base's actual size.
	 *								EVALPOS_PixelOwner
	 *								EVALPOS_PixelScene
	 *								EVALPOS_PixelViewport
	 *									Indicates that NewValue is an actual pixel value, relative to the corresponding base.
	 * @param	bZeroOrigin		FALSE indicates that the value specified includes the origin offset of the viewport.
	 * @param	bClampValues	if TRUE, clamps the values of RightFace and BottomFace so that they cannot be less than the values for LeftFace and TopFace
	 */
	virtual void SetPosition( const FLOAT LeftFace, const FLOAT TopFace, const FLOAT RightFace, const FLOAT BottomFace, EPositionEvalType InputType=EVALPOS_PixelViewport, UBOOL bZeroOrigin=FALSE, UBOOL bClampValues=TRUE );

	/* === UObject interface === */
	/**
	 * Called when a property value from a member struct or array has been changed in the editor, but before the value has actually been modified.
	 */
	virtual void PreEditChange( FEditPropertyChain& PropertyThatChanged );

	/**
	 * Called when a property value has been changed in the editor.
	 */
	virtual void PostEditChange( FEditPropertyChain& PropertyThatChanged );

	/**
	 * Called after this object has been completely de-serialized.  This version migrates the PrimaryStyle for this label over to the label's component.
	 */
	virtual void PostLoad();

protected:
	void CalculateAllPosition();
	void RecalcCellPosition();
	void RetainAttached();
	void RepositionAttached();

	void RequestUpdateOutfit( UBOOL bRecalcCellPos, UBOOL bReposAttached );
};

#endif

AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execOnAttachRepositioned);
AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execClearBoundDataStores);
AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execGetBoundDataStores);
AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execRefreshSubscriberValue);
AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execGetDataStoreBinding);
AUTOGENERATE_FUNCTION(UavaUIOutfitter,-1,execSetDataStoreBinding);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef AVAGAME_UIPRIVATE_NATIVE_DEFS
#define AVAGAME_UIPRIVATE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(avaGame,UavaUIFloatingPanel);
DECLARE_NATIVE_TYPE(avaGame,UavaUIOutfitter);
DECLARE_NATIVE_TYPE(avaGame,UavaUIParamDataProvider);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetCashItemDurability);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetCashItemInventory);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetCashItemPopup);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetCashItems);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetCashItemShop);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetLastGameResult);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetMainNavigation);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetMyPlayer);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetOptionSettings);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetPlayerInfo);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetReadyRoom);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetReadyRoomPlayers);
DECLARE_NATIVE_TYPE(avaGame,UUIDataProvider_AvaNetRoomSettings);

#define AUTO_INITIALIZE_REGISTRANTS_AVAGAME_UIPRIVATE \
	UavaUIFloatingPanel::StaticClass(); \
	UavaUIOutfitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindavaGameUavaUIOutfitterNative; \
	UavaUIParamDataProvider::StaticClass(); \
	UUIDataProvider_AvaNetCashItemDurability::StaticClass(); \
	UUIDataProvider_AvaNetCashItemInventory::StaticClass(); \
	UUIDataProvider_AvaNetCashItemPopup::StaticClass(); \
	UUIDataProvider_AvaNetCashItems::StaticClass(); \
	UUIDataProvider_AvaNetCashItemShop::StaticClass(); \
	UUIDataProvider_AvaNetLastGameResult::StaticClass(); \
	UUIDataProvider_AvaNetMainNavigation::StaticClass(); \
	UUIDataProvider_AvaNetMyPlayer::StaticClass(); \
	UUIDataProvider_AvaNetOptionSettings::StaticClass(); \
	UUIDataProvider_AvaNetPlayerInfo::StaticClass(); \
	UUIDataProvider_AvaNetReadyRoom::StaticClass(); \
	UUIDataProvider_AvaNetReadyRoomPlayers::StaticClass(); \
	UUIDataProvider_AvaNetRoomSettings::StaticClass(); \

#endif // AVAGAME_UIPRIVATE_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UavaUIOutfitter) GavaGameUavaUIOutfitterNatives[] = 
{ 
	MAP_NATIVE(UavaUIOutfitter,execOnAttachRepositioned)
	MAP_NATIVE(UavaUIOutfitter,execClearBoundDataStores)
	MAP_NATIVE(UavaUIOutfitter,execGetBoundDataStores)
	MAP_NATIVE(UavaUIOutfitter,execRefreshSubscriberValue)
	MAP_NATIVE(UavaUIOutfitter,execGetDataStoreBinding)
	MAP_NATIVE(UavaUIOutfitter,execSetDataStoreBinding)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(avaGame,UavaUIOutfitter);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,avaUIFloatingPanel,StateClassToDetach)
VERIFY_CLASS_SIZE_NODIE(UavaUIFloatingPanel)
VERIFY_CLASS_OFFSET_NODIE(U,avaUIOutfitter,OutfitElements)
VERIFY_CLASS_SIZE_NODIE(UavaUIOutfitter)
VERIFY_CLASS_OFFSET_NODIE(U,avaUIParamDataProvider,FieldDelimiter)
VERIFY_CLASS_SIZE_NODIE(UavaUIParamDataProvider)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemDurability,SelectedShopItemListIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemDurability,DurabilityListIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetCashItemDurability)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemInventory,CurrentEffectType)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemInventory,SelectedItemListIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetCashItemInventory)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemPopup,SelectedItemListIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemPopup,InvenSlot)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetCashItemPopup)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItems,SelectedInvenItemListIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetCashItems)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemShop,CurrentEffectType)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetCashItemShop,DurabilityListIndex)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetCashItemShop)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetLastGameResult)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetMainNavigation)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetMyPlayer)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetOptionSettings)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetPlayerInfo,ListIndex)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetPlayerInfo,AccountID)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetPlayerInfo)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetReadyRoom)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetReadyRoomPlayers)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetRoomSettings,RoomName)
VERIFY_CLASS_OFFSET_NODIE(U,UIDataProvider_AvaNetRoomSettings,SelectedMissionType)
VERIFY_CLASS_SIZE_NODIE(UUIDataProvider_AvaNetRoomSettings)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
