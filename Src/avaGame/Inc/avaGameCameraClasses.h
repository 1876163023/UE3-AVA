/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)


#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName AVAGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetCameraOriginOffset)
AUTOGENERATE_NAME(GetDesiredFOV)
AUTOGENERATE_NAME(GetViewOffset)

#ifndef NAMES_ONLY

struct FPenetrationAvoidanceFeeler
{
    FRotator AdjustmentRot;
    FLOAT WorldWeight;
    FLOAT PawnWeight;
    FVector Extent;
};

struct avaPlayerCamera_eventGetCameraWorstCaseLoc_Parms
{
    class APawn* TargetPawn;
    FVector ReturnValue;
    avaPlayerCamera_eventGetCameraWorstCaseLoc_Parms(EEventParm)
    {
    }
};
struct avaPlayerCamera_eventGetDesiredFOV_Parms
{
    class APawn* P;
    FLOAT ReturnValue;
    avaPlayerCamera_eventGetDesiredFOV_Parms(EEventParm)
    {
    }
};
struct avaPlayerCamera_eventGetCameraOriginOffset_Parms
{
    class APawn* TargetPawn;
    FVector ReturnValue;
    avaPlayerCamera_eventGetCameraOriginOffset_Parms(EEventParm)
    {
    }
};
struct avaPlayerCamera_eventGetViewOffset_Parms
{
    class APawn* TargetPawn;
    FLOAT DeltaTime;
    FRotator ViewRotation;
    FVector ReturnValue;
    avaPlayerCamera_eventGetViewOffset_Parms(EEventParm)
    {
    }
};
class AavaPlayerCamera : public ACamera
{
public:
    //## BEGIN PROPS avaPlayerCamera
    class AavaSoundScape* CurrentSoundScape;
    BITFIELD bResetCameraInterpolation:1;
    BITFIELD bDoPredictiveAvoidance:1;
    BITFIELD bValidateWorstLoc:1;
    TArrayNoInit<struct FPenetrationAvoidanceFeeler> PenetrationAvoidanceFeelers;
    FLOAT WorstLocInterpSpeed;
    FVector LastWorstLocationLocal;
    FLOAT LazyCamSpeed;
    FLOAT BlendTime;
    FLOAT SpectatorCameraRotInterpSpeed;
    FVector LastActualCameraOrigin;
    FVector LastViewOffset;
    FLOAT LastCamFOV;
    FVector WorstLocOffset;
    FLOAT WorstLocBlockedPct;
    FLOAT WorstLocPenetrationExtentScale;
    FLOAT PenetrationBlendOutTime;
    FLOAT PenetrationBlendInTime;
    FLOAT PenetrationBlockedPct;
    FLOAT PenetrationExtentScale;
    FVector LastActualOriginOffset;
    FRotator LastActualCameraOriginRot;
    class AActor* LastViewTarget;
    FLOAT FOV_SrcMin;
    FLOAT FOV_SrcMax;
    FLOAT FOV_DestMin;
    FLOAT FOV_DestMax;
    //## END PROPS avaPlayerCamera

    virtual void PlayerUpdateCameraNative(class APawn* P,FLOAT DeltaTime,struct FTViewTarget& OutVT);
    void PreventCameraPenetration(class APawn* P,const FVector& WorstLocation,FVector& DesiredLocation,FLOAT DeltaTime,FLOAT& DistBlockedPct,FLOAT CameraExtentScale,UBOOL bSingleRayOnly=0);
    DECLARE_FUNCTION(execPlayerUpdateCameraNative)
    {
        P_GET_OBJECT(APawn,P);
        P_GET_FLOAT(DeltaTime);
        P_GET_STRUCT_REF(struct FTViewTarget,OutVT);
        P_FINISH;
        PlayerUpdateCameraNative(P,DeltaTime,OutVT);
    }
    DECLARE_FUNCTION(execPreventCameraPenetration)
    {
        P_GET_OBJECT(APawn,P);
        P_GET_STRUCT_REF(FVector,WorstLocation);
        P_GET_STRUCT_REF(FVector,DesiredLocation);
        P_GET_FLOAT(DeltaTime);
        P_GET_FLOAT_REF(DistBlockedPct);
        P_GET_FLOAT(CameraExtentScale);
        P_GET_UBOOL_OPTX(bSingleRayOnly,0);
        P_FINISH;
        PreventCameraPenetration(P,WorstLocation,DesiredLocation,DeltaTime,DistBlockedPct,CameraExtentScale,bSingleRayOnly);
    }
    FVector eventGetCameraWorstCaseLoc(class APawn* TargetPawn)
    {
        avaPlayerCamera_eventGetCameraWorstCaseLoc_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.TargetPawn=TargetPawn;
        ProcessEvent(FindFunctionChecked(AVAGAME_GetCameraWorstCaseLoc),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventGetDesiredFOV(class APawn* P)
    {
        avaPlayerCamera_eventGetDesiredFOV_Parms Parms(EC_EventParm);
        Parms.ReturnValue=0;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(AVAGAME_GetDesiredFOV),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetCameraOriginOffset(class APawn* TargetPawn)
    {
        avaPlayerCamera_eventGetCameraOriginOffset_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.TargetPawn=TargetPawn;
        ProcessEvent(FindFunctionChecked(AVAGAME_GetCameraOriginOffset),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetViewOffset(class APawn* TargetPawn,FLOAT DeltaTime,FRotator ViewRotation)
    {
        avaPlayerCamera_eventGetViewOffset_Parms Parms(EC_EventParm);
        appMemzero(&Parms.ReturnValue,sizeof(Parms.ReturnValue));
        Parms.TargetPawn=TargetPawn;
        Parms.DeltaTime=DeltaTime;
        Parms.ViewRotation=ViewRotation;
        ProcessEvent(FindFunctionChecked(AVAGAME_GetViewOffset),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AavaPlayerCamera,ACamera,0,avaGame)
    static const TCHAR* StaticConfigName() {return TEXT("Game");}

    NO_DEFAULT_CONSTRUCTOR(AavaPlayerCamera)
};

#endif

AUTOGENERATE_FUNCTION(AavaPlayerCamera,-1,execPreventCameraPenetration);
AUTOGENERATE_FUNCTION(AavaPlayerCamera,-1,execPlayerUpdateCameraNative);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef AVAGAME_CAMERA_NATIVE_DEFS
#define AVAGAME_CAMERA_NATIVE_DEFS

DECLARE_NATIVE_TYPE(avaGame,AavaPlayerCamera);

#define AUTO_INITIALIZE_REGISTRANTS_AVAGAME_CAMERA \
	AavaPlayerCamera::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindavaGameAavaPlayerCameraNative; \

#endif // AVAGAME_CAMERA_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AavaPlayerCamera) GavaGameAavaPlayerCameraNatives[] = 
{ 
	MAP_NATIVE(AavaPlayerCamera,execPreventCameraPenetration)
	MAP_NATIVE(AavaPlayerCamera,execPlayerUpdateCameraNative)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(avaGame,AavaPlayerCamera);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(A,avaPlayerCamera,CurrentSoundScape)
VERIFY_CLASS_OFFSET_NODIE(A,avaPlayerCamera,FOV_DestMax)
VERIFY_CLASS_SIZE_NODIE(AavaPlayerCamera)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
