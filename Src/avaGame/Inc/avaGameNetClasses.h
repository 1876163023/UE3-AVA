/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif


// Split enums from the rest of the header so they can be included earlier
// than the rest of the header file by including this file twice with different
// #define wrappers. See Engine.h and look at EngineClasses.h for an example.
#if !NO_ENUMS && !defined(NAMES_ONLY)

enum EavaLeavingReason
{
    ELR_Normal              =0,
    ELR_Idle                =1,
    ELR_DidntReady          =2,
    ELR_HostDidntStart      =3,
    ELR_PackageMismatch     =4,
    ELR_PackageNotFound     =5,
    ELR_FailedToConnectHost =6,
    ELR_RejectedByHost      =7,
    ELR_MD5Failed           =8,
    ELR_P2PConnectionFailed =9,
    ELR_MAX                 =10,
};
enum EPopUpMsgType
{
    EPT_None                =0,
    EPT_Notice              =1,
    EPT_YesNo               =2,
    EPT_Warning             =3,
    EPT_Error               =4,
    EPT_GameInvitation      =5,
    EPT_FriendInvitation    =6,
    EPT_GuildInvitation     =7,
    EPT_MAX                 =8,
};
enum EChatMsgType
{
    EChat_Normal            =0,
    EChat_Notice            =1,
    EChat_GuildChat         =2,
    EChat_GuildNotice       =3,
    EChat_Whisper           =4,
    EChat_InGameSystem      =5,
    EChat_ReadyRoom         =6,
    EChat_PlayerSystem      =7,
    EChat_ServerNotice      =8,
    EChat_ChNotice          =9,
    EChat_GuildSystem       =10,
    EChat_GMWhisper         =11,
    EChat_TeamSay           =12,
    EChat_Say               =13,
    EChat_MAX               =14,
};
enum EChannelSetting
{
    EChannelSetting_EnableAutoBalance=0,
    EChannelSetting_EnableSpectator=1,
    EChannelSetting_EnableInterrupt=2,
    EChannelSetting_EnableBackView=3,
    EChannelSetting_EnableGhostChat=4,
    EChannelSetting_EnableAutoSwapTeam=5,
    EChannelSetting_EnableMaxPlayers=6,
    EChannelSetting_EnableTKLevel=7,
    EChannelSetting_MissionTypeSpecial=8,
    EChannelSetting_MissionTypeWarfare=9,
    EChannelSetting_MissionTypeTraining=10,
    EChannelSetting_DefaultAutoBalance=11,
    EChannelSetting_DefaultSpectator=12,
    EChannelSetting_DefaultInterrupt=13,
    EChannelSetting_DefaultBackView=14,
    EChannelSetting_DefaultGhostChat=15,
    EChannelSetting_DefaultAutoSwapTeam=16,
    EChannelSetting_DefaultTKLevel=17,
    EChannelSetting_DefaultMaxPlayers=18,
    EChannelSetting_RoomChangeTeam=19,
    EChannelSetting_RoomSkipMinPlayerCheck=20,
    EChannelSetting_RoomSkipBalanceCheck=21,
    EChannelSetting_GameIdleCheck=22,
    EChannelSetting_GameFreeCam=23,
    EChannelSetting_GameCheckAllOut=24,
    EChannelSetting_UpdatePlayerScore=25,
    EChannelSetting_UpdateStatLog=26,
    EChannelSetting_InvenCashItem=27,
    EChannelSetting_AllowPCBangBonus=28,
    EChannelSetting_AllowBoostItem=29,
    EChannelSetting_AllowEventBonus=30,
    EChannelSetting_MAX     =31,
};
enum EChannelFlag
{
    EChannelFlag_Normal     =0,
    EChannelFlag_Trainee    =1,
    EChannelFlag_Match      =2,
    EChannelFlag_Reserve2   =3,
    EChannelFlag_Reserve3   =4,
    EChannelFlag_Newbie     =5,
    EChannelFlag_Clan       =6,
    EChannelFlag_PCBang     =7,
    EChannelFlag_Event      =8,
    EChannelFlag_MyClan     =9,
    EChannelFlag_Practice   =10,
    EChannelFlag_Broadcast  =11,
    EChannelFlag_AutoBalance=12,
    EChannelFlag_Temp       =13,
    EChannelFlag_MAX        =14,
};
enum EVoteKickReason
{
    EKR_HackUser            =0,
    EKR_BugUser             =1,
    EKR_Abuser              =2,
    EKR_NoManner            =3,
    EKR_Misc                =4,
    EKR_MAX                 =5,
};
enum EVoteCommand
{
    EVC_Kick                =0,
    EVC_MAX                 =1,
};
enum ENetGameState
{
    EGS_None                =0,
    EGS_GameBegin           =1,
    EGS_GameEnd             =2,
    EGS_RoundBegin          =3,
    EGS_RoundEnd            =4,
    EGS_MAX                 =5,
};
enum EMsgOption
{
    EMsg_Option_SettingChanged=0,
    EMsg_Option_MAX         =1,
};
enum EMsgGuild
{
    EMsg_Guild_Info         =0,
    EMsg_Guild_MemberList   =1,
    EMsg_Guild_JoinChannel  =2,
    EMsg_Guild_LeaveChannel =3,
    EMsg_Guild_Motd         =4,
    EMsg_Guild_Chat         =5,
    EMsg_Guild_Notice       =6,
    EMsg_Guild_MemberState  =7,
    EMsg_Guild_PlayerInfo   =8,
    EMsg_Guild_Invite       =9,
    EMsg_Guild_Join         =10,
    EMsg_Guild_Leave        =11,
    EMsg_Guild_Kick         =12,
    EMsg_Guild_GetChannelAddr=13,
    EMsg_Guild_RankChanged  =14,
    EMsg_Guild_MasterChanged=15,
    EMsg_Guild_UpdateScore  =16,
    EMsg_Guild_MAX          =17,
};
enum EMsgBuddy
{
    EMsg_Buddy_ConsoleCommand=0,
    EMsg_Buddy_AddReq       =1,
    EMsg_Buddy_AddReqAns    =2,
    EMsg_Buddy_Delete       =3,
    EMsg_Buddy_AddBlock     =4,
    EMsg_Buddy_DeleteBlock  =5,
    EMsg_Buddy_InviteGame   =6,
    EMsg_Buddy_InviteGuild  =7,
    EMsg_Buddy_Chat         =8,
    EMsg_Buddy_Location     =9,
    EMsg_Buddy_StateChanged =10,
    EMsg_Buddy_List         =11,
    EMsg_Buddy_PlayerInfo   =12,
    EMsg_Buddy_EndFollow    =13,
    EMsg_Buddy_MAX          =14,
};
enum EMsgAdmin
{
    EMsg_Admin_Notice       =0,
    EMsg_Admin_Kick         =1,
    EMsg_Admin_ChatOff      =2,
    EMsg_Admin_ChangeRoomName=3,
    EMsg_Admin_SetVisibility=4,
    EMsg_Admin_MainNotice   =5,
    EMsg_Admin_Whisper      =6,
    EMsg_Admin_MAX          =7,
};
enum EMsgInventory
{
    EMsg_Inventory_EquipSet =0,
    EMsg_Inventory_WeaponSet=1,
    EMsg_Inventory_CustomSet=2,
    EMsg_Inventory_EffSet   =3,
    EMsg_Inventory_Buy      =4,
    EMsg_Inventory_EffBuy   =5,
    EMsg_Inventory_SendGift =6,
    EMsg_Inventory_Repair   =7,
    EMsg_Inventory_ConvertRIS=8,
    EMsg_Inventory_Sell     =9,
    EMsg_Inventory_UpdateGauge=10,
    EMsg_Inventory_DeleteItem=11,
    EMsg_Inventory_DeleteCustom=12,
    EMsg_Inventory_DeleteEffect=13,
    EMsg_Inventory_Enter    =14,
    EMsg_Inventory_Leave    =15,
    EMsg_Inventory_ChangeClass=16,
    EMsg_Inventory_GetCash  =17,
    EMsg_Inventory_Charge   =18,
    EMsg_Inventory_MAX      =19,
};
enum EMsgGame
{
    EMsg_Game_Start         =0,
    EMsg_Game_StartCount    =1,
    EMsg_Game_CancelCount   =2,
    EMsg_Game_LoadingProgress=3,
    EMsg_Game_Leave         =4,
    EMsg_Game_ResultUpdate  =5,
    EMsg_Game_End           =6,
    EMsg_Game_Chat          =7,
    EMsg_Game_LevelUpGrats  =8,
    EMsg_Game_MAX           =9,
};
enum EMsgRoom
{
    EMsg_Room_Create        =0,
    EMsg_Room_Join          =1,
    EMsg_Room_Leave         =2,
    EMsg_Room_Info          =3,
    EMsg_Room_PlayerList    =4,
    EMsg_Room_PlayerInfo    =5,
    EMsg_Room_Chat          =6,
    EMsg_Room_ChangeHost    =7,
    EMsg_Room_Kick          =8,
    EMsg_Room_ChangeSetting =9,
    EMsg_Room_ChangeState   =10,
    EMsg_Room_Ready         =11,
    EMsg_Room_ChangeSlot    =12,
    EMsg_Room_ChangeClass   =13,
    EMsg_Room_ChangeWeapon  =14,
    EMsg_Room_RttRating     =15,
    EMsg_Room_RtttStart     =16,
    EMsg_Room_SwapTeam      =17,
    EMsg_Room_QuickJoin     =18,
    EMsg_Room_ClanInfo      =19,
    EMsg_Room_ClaimHost     =20,
    EMsg_Room_MAX           =21,
};
enum EMsgChannel
{
    EMsg_Channel_List       =0,
    EMsg_Channel_Join       =1,
    EMsg_Channel_Leave      =2,
    EMsg_Channel_RoomList   =3,
    EMsg_Channel_RoomInfo   =4,
    EMsg_Channel_PlayerList =5,
    EMsg_Channel_PlayerInfo =6,
    EMsg_Channel_FollowPlayer=7,
    EMsg_Channel_LobbyJoin  =8,
    EMsg_Channel_LobbyLeave =9,
    EMsg_Channel_LobbyChat  =10,
    EMsg_Channel_RoomState  =11,
    EMsg_Channel_RoomSetting=12,
    EMsg_Channel_RoomCreate =13,
    EMsg_Channel_RoomDelete =14,
    EMsg_Channel_Whisper    =15,
    EMsg_Channel_MAX        =16,
};
enum EMsgClient
{
    EMsg_Client_Connect     =0,
    EMsg_Client_Disconnect  =1,
    EMsg_Client_CheckNick   =2,
    EMsg_Client_PlayerInfo  =3,
    EMsg_Client_MainNotice  =4,
    EMsg_Client_Kick        =5,
    EMsg_Client_GuildConnect=6,
    EMsg_Client_GuildDisconnect=7,
    EMsg_Client_HwInfo      =8,
    EMsg_Client_SetConfig   =9,
    EMsg_Client_SetRttTestAddr=10,
    EMsg_Client_NoMorePremiumPcBang=11,
    EMsg_Client_MAX         =12,
};
enum EMsgCategory
{
    EMsg_Client             =0,
    EMsg_Channel            =1,
    EMsg_Room               =2,
    EMsg_Game               =3,
    EMsg_Inventory          =4,
    EMsg_Guild              =5,
    EMsg_Friend             =6,
    EMsg_Admin              =7,
    EMsg_Buddy              =8,
    EMsg_Option             =9,
    EMsg_MAX                =10,
};

#endif // !NO_ENUMS

#if !ENUMS_ONLY

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern FName AVAGAME_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AddPendingEvent)
AUTOGENERATE_NAME(AddPendingMsg)
AUTOGENERATE_NAME(ChatMessage)
AUTOGENERATE_NAME(GetWeaponIconCode)
AUTOGENERATE_NAME(OnInit)
AUTOGENERATE_NAME(PopUpMessage)
AUTOGENERATE_NAME(ProcAdminMessage)
AUTOGENERATE_NAME(ProcBuddyMessage)
AUTOGENERATE_NAME(ProcChannelMessage)
AUTOGENERATE_NAME(ProcClientMessage)
AUTOGENERATE_NAME(ProcClientMessageGame)
AUTOGENERATE_NAME(ProcClientMessageNet)
AUTOGENERATE_NAME(ProcCriticalError)
AUTOGENERATE_NAME(ProcGameMessage)
AUTOGENERATE_NAME(ProcGuildMessage)
AUTOGENERATE_NAME(ProcHMEndGame)
AUTOGENERATE_NAME(ProcInventoryMessage)
AUTOGENERATE_NAME(ProcOptionMessage)
AUTOGENERATE_NAME(ProcRoomMessage)
AUTOGENERATE_NAME(ProcRoomMessageGame)
AUTOGENERATE_NAME(ProcRoomMessageNet)
AUTOGENERATE_NAME(ProcSendError)
AUTOGENERATE_NAME(SendPlayerResult)
AUTOGENERATE_NAME(Tick)

#ifndef NAMES_ONLY

struct FavaScoreInfo
{
    INT Attacker;
    INT Defender;
    INT Leader;
    INT Tactic;
};

struct FavaClassScoreInfo
{
    INT PlayTime;
    INT PlayRound;
    INT SprintTime;
    INT KillCount;
    INT HeadshotCount;
    INT HeadshotKillCount;
    INT TakenDamage;
    INT WeaponDamage[4];
    INT WeaponKillCount[4];
};

struct FavaPlayerScoreInfo
{
    INT idAccount;
    INT GameWin;
    INT RoundWin;
    INT RoundDefeat;
    INT DisconnectCount;
    INT DeathCount;
    struct FavaScoreInfo Score;
    struct FavaClassScoreInfo ClassScoreInfo[3];
    INT RoundTopKillCount;
    INT RoundTopHeadshotKillCount;
    INT TopLevelKillCount;
    INT HigherLevelKillCount;
    INT BulletMultiKillCount;
    INT GrenadeMultiKillCount;
    INT NoDamageWinCount;
    INT TopScoreCount;
    INT NoDeathRoundCount;
    INT WeaponFireCount[4];
    INT WeaponHitCount[4];
    INT WeaponHeadshotCount[4];
    INT HelmetDropCount;
    INT TeamKillCount;
    INT CurrentClass;
    BITFIELD bLeader:1;

		FavaPlayerScoreInfo();
	
};

struct FavaGameScoreLog
{
    INT KillCount;
    INT SuicideCount;
    INT HeadshotKillCount;
    struct FavaScoreInfo Score;
    INT FriendlyFireCount;
    INT FriendlyKillCount;
    INT SpawnCount[3];
};

struct FavaWeaponLog
{
    class UClass* Weapon;
    INT UsedCount;
    INT FireCount;
    INT HitCount_Head;
    INT HitCount_Body;
    INT HitCount_Stomach;
    INT HitCount_LeftArm;
    INT HitCount_RightArm;
    INT HitCount_LeftLeg;
    INT HitCount_RightLeg;
    FLOAT HitDistance;
    INT HitDamage;
    INT KillCount[3];
    INT HeadshotKillCount;
    INT MultiKillCount;
};

struct FavaRoundPlayLog
{
    INT Winner;
    INT WinType;
    INT StartTime;
    INT RoundTime;
    INT PlayerCount[2];
    TArrayNoInit<struct FavaWeaponLog> WeaponLogs;

    /** Constructors */
    FavaRoundPlayLog() {}
    FavaRoundPlayLog(EEventParm)
    {
        appMemzero(this, sizeof(FavaRoundPlayLog));
    }
};

struct FavaKillLog
{
    INT KillTime;
    class UClass* Weapon;
    FVector KillerLocation;
    FVector VictimLocation;
};

struct FavaStatLog
{
    struct FavaGameScoreLog GameScoreLogs[2];
    TArrayNoInit<struct FavaRoundPlayLog> RoundPlayLogs;
    TArrayNoInit<struct FavaKillLog> KillLogs;

    /** Constructors */
    FavaStatLog() {}
    FavaStatLog(EEventParm)
    {
        appMemzero(this, sizeof(FavaStatLog));
    }
};

struct FavaPopUpMsgInfo
{
    BYTE MsgType;
    FStringNoInit PopUpMsg;
    FStringNoInit NextScene;
    FName NextUIEventName;

    /** Constructors */
    FavaPopUpMsgInfo() {}
    FavaPopUpMsgInfo(EEventParm)
    {
        appMemzero(this, sizeof(FavaPopUpMsgInfo));
    }
};

struct FavaRoomPlayerInfo
{
    INT AccountID;
    FStringNoInit NickName;
    FName NickFName;
    INT Level;
    INT TeamID;
    INT LoadingProgress;
    INT LoadingStepCount;
    INT UpdateCount;
    DOUBLE UpdateTime;

    /** Constructors */
    FavaRoomPlayerInfo() {}
    FavaRoomPlayerInfo(EEventParm)
    {
        appMemzero(this, sizeof(FavaRoomPlayerInfo));
    }
};

struct FavaWeaponIDMap
{
    class UClass* Weapon;
    INT ItemId;
};

struct FavaNetEventParam
{
    class UClass* EventClass;
    BITFIELD BoolParam:1;
    INT IntParam;
    FLOAT FloatParam;
    FStringNoInit StrParam;
    class UObject* ObjParam;

    /** Constructors */
    FavaNetEventParam() {}
    FavaNetEventParam(EEventParm)
    {
        appMemzero(this, sizeof(FavaNetEventParam));
    }
};

struct FPendingSceneInfo
{
    class UClass* BaseGameClass;
    class UUIScene* UIScene;
    BYTE Priority;
    TArrayNoInit<struct FavaNetEventParam> EventParams;
    FLOAT Lifetime;
    TArrayNoInit<FName> ExclSceneTags;

    /** Constructors */
    FPendingSceneInfo() {}
    FPendingSceneInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPendingSceneInfo));
    }
};

struct FPendingEventInfo
{
    struct FavaNetEventParam EventParam;
    class UClass* BaseGameClass;
    TArrayNoInit<FName> BaseSceneTags;
    TArrayNoInit<FName> ExclSceneTags;

    /** Constructors */
    FPendingEventInfo() {}
    FPendingEventInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPendingEventInfo));
    }
};

struct FPendingMsgInfo
{
    BYTE MsgCategory;
    BYTE msg;
    class UClass* BaseGameClass;
    FStringNoInit param1;
    FStringNoInit param2;
    INT Param3;
    INT Param4;

    /** Constructors */
    FPendingMsgInfo() {}
    FPendingMsgInfo(EEventParm)
    {
        appMemzero(this, sizeof(FPendingMsgInfo));
    }
};

#define UCONST_EWeapon_Pirmary 3

struct avaNetHandler_eventTick_Parms
{
    FLOAT DeltaTime;
    avaNetHandler_eventTick_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventChatMessage_Parms
{
    FString ChatMsg;
    BYTE MsgType;
    UBOOL InChannel;
    UBOOL InGame;
    avaNetHandler_eventChatMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventSendPlayerResult_Parms
{
    INT idAccount;
    avaNetHandler_eventSendPlayerResult_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcHMEndGame_Parms
{
    UBOOL bHost;
    avaNetHandler_eventProcHMEndGame_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventGetWeaponIconCode_Parms
{
    INT idItem;
    FString ReturnValue;
    avaNetHandler_eventGetWeaponIconCode_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcSendError_Parms
{
    BYTE Category;
    INT Id;
    FString Err;
    avaNetHandler_eventProcSendError_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcOptionMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcOptionMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcGuildMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcGuildMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcBuddyMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcBuddyMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcAdminMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcAdminMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcGameMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcGameMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcInventoryMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcInventoryMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcRoomMessageGame_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcRoomMessageGame_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcRoomMessageNet_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcRoomMessageNet_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcRoomMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcRoomMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcChannelMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcChannelMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcClientMessageGame_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcClientMessageGame_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcClientMessageNet_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcClientMessageNet_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcClientMessage_Parms
{
    BYTE msg;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventProcClientMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventProcCriticalError_Parms
{
    FString Code;
    avaNetHandler_eventProcCriticalError_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventAddPendingMsg_Parms
{
    BYTE MsgCat;
    BYTE msg;
    class UClass* BaseGameClass;
    FString param1;
    FString param2;
    INT Param3;
    INT Param4;
    avaNetHandler_eventAddPendingMsg_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventAddPendingEvent_Parms
{
    class UClass* EventClass;
    class UClass* BaseGameClass;
    TArray<FName> BaseSceneTags;
    TArray<FName> ExclSceneTags;
    FString StrParam;
    INT IntParam;
    UBOOL BoolParam;
    FLOAT FloatParam;
    class UObject* ObjParam;
    avaNetHandler_eventAddPendingEvent_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventPopUpMessage_Parms
{
    BYTE MsgType;
    FString PopUpMsg;
    FString NextScene;
    FName NextUIEventName;
    TArray<FName> ExclSceneTags;
    FLOAT Lifetime;
    avaNetHandler_eventPopUpMessage_Parms(EEventParm)
    {
    }
};
struct avaNetHandler_eventOnInit_Parms
{
    avaNetHandler_eventOnInit_Parms(EEventParm)
    {
    }
};
class UavaNetHandler : public UObject
{
public:
    //## BEGIN PROPS avaNetHandler
    TArrayNoInit<struct FavaWeaponIDMap> WeaponIDList;
    TArrayNoInit<struct FavaRoomPlayerInfo> RoomStartingPlayerList;
    FLOAT LoadingCheckTime;
    INT LoadingCutOffPerc;
    INT HostLoadingProgress;
    TArrayNoInit<struct FPendingSceneInfo> PendingSceneList;
    TArrayNoInit<struct FPendingEventInfo> PendingEventList;
    TArrayNoInit<struct FPendingMsgInfo> PendingMsgList;
    FStringNoInit PopupSceneName;
    FStringNoInit HostMigrationSceneName;
    FStringNoInit ExitSceneName;
    class UClass* NetEntryGameClass;
    class UClass* TeamGameClass;
    class UClass* DeathMatchGameClass;
    TArrayNoInit<INT> StartPlayerIDList;
    TArrayNoInit<class UClass*> CharacterModifierList;
    TArrayNoInit<class UClass*> WeaponModifierList;
    TArrayNoInit<FName> EntrySceneTags;
    TArrayNoInit<FName> PersistentEntrySceneTags;
    class UavaTransBuffer* Trans;
    //## END PROPS avaNetHandler

    void LeaveRoom(BYTE Reason=0);
    UBOOL CanExitGame();
    void KickSlowLoadingPlayers(INT CutOffPerc);
    void CheckLoadingTimeOut();
    void StartLoadingCheck();
    void GetRoomStartPlayerList(TArray<INT>& IDList);
    UBOOL IsPlayerAdult();
    FString GetConnectResult();
    INT CheckMyLocation();
    UBOOL AmIAdmin();
    UBOOL IsStealthMode();
    UBOOL IsInClanLobby();
    BYTE GetCurrentChannelFlag();
    INT GetChannelSetting(BYTE Setting);
    UBOOL IsInPcBang();
    FString GetConfigString();
    FString GetConfigString2();
    void ListChannel();
    void ListRoom();
    void UpdatePlayerScore(struct FavaPlayerScoreInfo ScoreInfo);
    void UpdateGameState(INT RoundCount,BYTE GameState=0);
    void EndGame(const TArray<struct FavaPlayerScoreInfo>& ScoreInfoList,INT AvgHostPing=-1);
    void ReportGameResult(const TArray<struct FavaPlayerScoreInfo>& ScoreInfoList,INT TeamScoreEU=-1,INT TeamScoreNRF=-1);
    void ReportEndGame(INT AvgHostPing=-1);
    void LeaveGame();
    void DisconnectFromGame(INT NextState);
    void VoteForHostBan();
    void ReportGameStat(struct FavaStatLog& StatLog);
    UBOOL IsGameResultValid(UBOOL bFull=TRUE);
    void ReportVoteNew(BYTE Command,INT idCaller,const TArray<INT>& VoterList,INT param1,INT param2);
    UBOOL IsVoteAvailable();
    void ProcHostCrash();
    void SwapTeamInGame();
    void AddChatMsg(const FString& ChatMsg,BYTE MsgType=0);
    UBOOL FilterChatMsg(FString& ChatMsg);
    UBOOL ParseChatCommand(const FString& Cmd);
    virtual void GetWrappedString(TArray<FString>& out_strings,const FString& inMsg,INT MsgType,INT BoundSize=300);
    FString GetMyNickname();
    FString GetMyClanName();
    INT GetMyAccountID();
    BYTE GetMyBestChannelFlag();
    INT GetCurrentRoomState();
    UBOOL GetCurrentEquipState(INT& MyTeam,INT& MyClass,INT& MyFace,INT& MyWeapon);
    INT GetHostAccountID();
    UBOOL AmIHost();
    UBOOL AmISpectator();
    UBOOL AmIReady();
    UBOOL IsCountingDown();
    UBOOL IsGameStartable(UBOOL bCheckHost=TRUE);
    UBOOL IsGameStartableEx(FString& ErrorTypeStr,UBOOL bCheckHost=TRUE);
    UBOOL IsBalancedRoomPlayers(FString& ErrorTypeStr);
    UBOOL IsSpectatorAllowed();
    FString GetCurrentMapFileName();
    BYTE GetCurrentMapMissionType();
    INT GetMyRoomSlot();
    INT GetPlayerRoomSlot(INT idAccount);
    UBOOL GetRoomInfo(INT RoomListIndex,INT& RoomID,INT& nPassword,FString& RoomName,FString& HostName);
    UBOOL IsMatchRoom();
    INT GetCurrentChannelMaskLevel(INT idAccount=0);
    FString GetURLString(INT idAccount,const FString& Option=TEXT(""));
    FString GetMyURLString(const FString& Option=TEXT(""));
    UBOOL IsPlayerInGame(INT idAccount);
    UBOOL GetPlayerInfo(BYTE& Level,BYTE& LastClass,BYTE& LastTeam,INT& Exp,INT& SupplyPoint,INT& Cash,INT& Money,INT& idClanMark);
    INT GetPlayerTeamIndex(INT idAccount);
    INT GetClanMarkID(INT idAccount);
    UBOOL DoIHaveItem(INT ListIndex);
    UBOOL DoIHaveCustomItem(INT ListIndex);
    UBOOL DoIHaveCustomItemInSlot(INT InvenSlot,INT SlotIdx);
    UBOOL HaveFriendPlayerNamed(const FString& FriendPlayerName,INT& ListIndex,INT& BuddyType);
    UBOOL HaveBlockedPlayerNamed(const FString& BlockedPlayerName,INT& ListIndex);
    UBOOL HaveClanMemberNamed(const FString& BlockedPlayerName,INT& ListIndex);
    UBOOL IsBIAPlayer(const FString& PlayerName);
    UBOOL HasOwnClan(const FString& PlayerName,FString& ItsOwnClanName);
    UBOOL GetLobbyPlayerName(INT LobbyPlayerListIndex,FString& PlayerName);
    UBOOL GetFriendPlayerName(INT BuddyListIndex,FString& PlayerName);
    UBOOL GetBlockedPlayerName(INT BlockListIndex,FString& PlayerName);
    UBOOL GetSelectedLobbyPlayerInfo(FString& NickName,FString& GuildName,INT& Level,INT& WinCount,INT& DefeatCount,INT& DisconnectCount,INT& KillCount,INT& DeathCount);
    UBOOL GetSelectedFriendPlayerInfo(FString& NickName,FString& GuildName,INT& Level,INT& WinCount,INT& DefeatCount,INT& DisconnectCount,INT& KillCount,INT& DeathCount);
    UBOOL GetSelectedBlockedPlayerInfo(FString& NickName,FString& GuildName,INT& Level,INT& WinCount,INT& DefeatCount,INT& DisconnectCount,INT& KillCount,INT& DeathCount);
    UBOOL GetSelectedGuildPlayerInfo(FString& NickName,FString& GuildName,INT& Level,INT& WinCount,INT& DefeatCount,INT& DisconnectCount,INT& KillCount,INT& DeathCount);
    UBOOL CheckWeaponRefundCond(INT InvenSlot);
    UBOOL CheckEquipRefundCond(INT InvenSlot);
    UBOOL CheckCustomRefundCond(INT InvenSlot,INT CustomSlotIndex);
    FString CheckRoomKickedState();
    FString GetLastWhisperedPlayerName();
    INT GetBIAAccountID();
    INT GetAvailableWeaponsBySlot(INT idSlot,TArray<INT>& ItemList);
    INT GetAvailableEquipsBySlot(INT idSlot,TArray<INT>& ItemList);
    INT GetAvailableEffectsBySlot(INT idSlot,TArray<INT>& ItemList);
    FString GetWeaponName(INT idItem);
    FString GetSkillName(BYTE PlayerClass,INT SkillID);
    FString GetAwardName(INT AwardID);
    FString GetPlayerLevelName(INT PlayerLevel);
    UBOOL GetItemDesc(INT ItemId,FString& ItemName,BYTE& LevelLimit,BYTE& GaugeType,INT& Price,INT& RepairPrice,INT& RebuildPrice,FString& LiteralDesc,FString& IconCode,INT& Customizable);
    UBOOL GetEffectItemDesc(INT ItemId,INT& GaugeType,INT& EffectType,INT& EffectValue,FString& ItemName,FString& ItemDesc,FString& IconStr);
    UBOOL GetItemId(BYTE IndexType,INT ListIndex,INT& ItemId);
    UBOOL GetCustomItemID(INT InvenSlot,INT CustomSlotIndex,INT& ItemId);
    UBOOL GetWeaponRIS(INT InvenSlot,BYTE& bIsRISConvertible,INT& RemodelPrice);
    UBOOL GetWeaponRepairInfo(INT InvenSlot,INT& RepairPrice,BYTE& bAfford);
    UBOOL GetEquipRepairInfo(INT InvenSlot,INT& RepairPrice,BYTE& bAfford);
    UBOOL GetCustomCompInfo(INT InvenSlot,INT CustomListIndex,INT& AlterSlot,INT& AlterItemID,INT& CompPrice);
    UBOOL WICGetCash();
    UBOOL WICOpenChargeWindow();
    UBOOL WICBuyItem(INT idItem);
    UBOOL WICSendGift(INT idItem,INT idAccountTo);
    UBOOL WICOpenGiftWindow(INT idItem);
    INT BeginTransaction(const FString& SessionName);
    UBOOL UndoTransaction();
    INT EndTransaction();
    void GetTransactionObjects(TArray<class UObject*>& OutObjects);
    UBOOL ProcCountDown();
    void ClearRTNotice();
    INT GetCurrentTickerCount();
    FLOAT GetChatOffDue();
    UBOOL CanMyClanJoinSelectedRoom();
    void GetCurrentRoomsClanNames(FString& EUName,FString& NRFName);
    UBOOL IsPendingPopUpMsg();
    void OptionSaveUserKey(const FString& UserKeyStr,const FString& OptionStr=TEXT(""));
    class AWorldInfo* GetWorldInfo();
    class UClass* GetGameInfoClass();
    INT GetNetVersion();
    class UavaNetHandler* GetAvaNetHandler();
    FString GetClanMarkPkgNameFromID(INT Id,UBOOL bSmall=FALSE,UBOOL bMarkup=FALSE);
    DECLARE_FUNCTION(execLeaveRoom)
    {
        P_GET_BYTE_OPTX(Reason,0);
        P_FINISH;
        LeaveRoom(Reason);
    }
    DECLARE_FUNCTION(execCanExitGame)
    {
        P_FINISH;
        *(UBOOL*)Result=CanExitGame();
    }
    DECLARE_FUNCTION(execKickSlowLoadingPlayers)
    {
        P_GET_INT(CutOffPerc);
        P_FINISH;
        KickSlowLoadingPlayers(CutOffPerc);
    }
    DECLARE_FUNCTION(execCheckLoadingTimeOut)
    {
        P_FINISH;
        CheckLoadingTimeOut();
    }
    DECLARE_FUNCTION(execStartLoadingCheck)
    {
        P_FINISH;
        StartLoadingCheck();
    }
    DECLARE_FUNCTION(execGetRoomStartPlayerList)
    {
        P_GET_TARRAY_REF(INT,IDList);
        P_FINISH;
        GetRoomStartPlayerList(IDList);
    }
    DECLARE_FUNCTION(execIsPlayerAdult)
    {
        P_FINISH;
        *(UBOOL*)Result=IsPlayerAdult();
    }
    DECLARE_FUNCTION(execGetConnectResult)
    {
        P_FINISH;
        *(FString*)Result=GetConnectResult();
    }
    DECLARE_FUNCTION(execCheckMyLocation)
    {
        P_FINISH;
        *(INT*)Result=CheckMyLocation();
    }
    DECLARE_FUNCTION(execAmIAdmin)
    {
        P_FINISH;
        *(UBOOL*)Result=AmIAdmin();
    }
    DECLARE_FUNCTION(execIsStealthMode)
    {
        P_FINISH;
        *(UBOOL*)Result=IsStealthMode();
    }
    DECLARE_FUNCTION(execIsInClanLobby)
    {
        P_FINISH;
        *(UBOOL*)Result=IsInClanLobby();
    }
    DECLARE_FUNCTION(execGetCurrentChannelFlag)
    {
        P_FINISH;
        *(BYTE*)Result=GetCurrentChannelFlag();
    }
    DECLARE_FUNCTION(execGetChannelSetting)
    {
        P_GET_BYTE(Setting);
        P_FINISH;
        *(INT*)Result=GetChannelSetting(Setting);
    }
    DECLARE_FUNCTION(execIsInPcBang)
    {
        P_FINISH;
        *(UBOOL*)Result=IsInPcBang();
    }
    DECLARE_FUNCTION(execGetConfigString)
    {
        P_FINISH;
        *(FString*)Result=GetConfigString();
    }
    DECLARE_FUNCTION(execGetConfigString2)
    {
        P_FINISH;
        *(FString*)Result=GetConfigString2();
    }
    DECLARE_FUNCTION(execListChannel)
    {
        P_FINISH;
        ListChannel();
    }
    DECLARE_FUNCTION(execListRoom)
    {
        P_FINISH;
        ListRoom();
    }
    DECLARE_FUNCTION(execUpdatePlayerScore)
    {
        P_GET_STRUCT(struct FavaPlayerScoreInfo,ScoreInfo);
        P_FINISH;
        UpdatePlayerScore(ScoreInfo);
    }
    DECLARE_FUNCTION(execUpdateGameState)
    {
        P_GET_INT(RoundCount);
        P_GET_BYTE_OPTX(GameState,0);
        P_FINISH;
        UpdateGameState(RoundCount,GameState);
    }
    DECLARE_FUNCTION(execEndGame)
    {
        P_GET_TARRAY(struct FavaPlayerScoreInfo,ScoreInfoList);
        P_GET_INT_OPTX(AvgHostPing,-1);
        P_FINISH;
        EndGame(ScoreInfoList,AvgHostPing);
    }
    DECLARE_FUNCTION(execReportGameResult)
    {
        P_GET_TARRAY(struct FavaPlayerScoreInfo,ScoreInfoList);
        P_GET_INT_OPTX(TeamScoreEU,-1);
        P_GET_INT_OPTX(TeamScoreNRF,-1);
        P_FINISH;
        ReportGameResult(ScoreInfoList,TeamScoreEU,TeamScoreNRF);
    }
    DECLARE_FUNCTION(execReportEndGame)
    {
        P_GET_INT_OPTX(AvgHostPing,-1);
        P_FINISH;
        ReportEndGame(AvgHostPing);
    }
    DECLARE_FUNCTION(execLeaveGame)
    {
        P_FINISH;
        LeaveGame();
    }
    DECLARE_FUNCTION(execDisconnectFromGame)
    {
        P_GET_INT(NextState);
        P_FINISH;
        DisconnectFromGame(NextState);
    }
    DECLARE_FUNCTION(execVoteForHostBan)
    {
        P_FINISH;
        VoteForHostBan();
    }
    DECLARE_FUNCTION(execReportGameStat)
    {
        P_GET_STRUCT_INIT_REF(struct FavaStatLog,StatLog);
        P_FINISH;
        ReportGameStat(StatLog);
    }
    DECLARE_FUNCTION(execIsGameResultValid)
    {
        P_GET_UBOOL_OPTX(bFull,TRUE);
        P_FINISH;
        *(UBOOL*)Result=IsGameResultValid(bFull);
    }
    DECLARE_FUNCTION(execReportVoteNew)
    {
        P_GET_BYTE(Command);
        P_GET_INT(idCaller);
        P_GET_TARRAY(INT,VoterList);
        P_GET_INT(param1);
        P_GET_INT(param2);
        P_FINISH;
        ReportVoteNew(Command,idCaller,VoterList,param1,param2);
    }
    DECLARE_FUNCTION(execIsVoteAvailable)
    {
        P_FINISH;
        *(UBOOL*)Result=IsVoteAvailable();
    }
    DECLARE_FUNCTION(execProcHostCrash)
    {
        P_FINISH;
        ProcHostCrash();
    }
    DECLARE_FUNCTION(execSwapTeamInGame)
    {
        P_FINISH;
        SwapTeamInGame();
    }
    DECLARE_FUNCTION(execAddChatMsg)
    {
        P_GET_STR(ChatMsg);
        P_GET_BYTE_OPTX(MsgType,0);
        P_FINISH;
        AddChatMsg(ChatMsg,MsgType);
    }
    DECLARE_FUNCTION(execFilterChatMsg)
    {
        P_GET_STR_REF(ChatMsg);
        P_FINISH;
        *(UBOOL*)Result=FilterChatMsg(ChatMsg);
    }
    DECLARE_FUNCTION(execParseChatCommand)
    {
        P_GET_STR(Cmd);
        P_FINISH;
        *(UBOOL*)Result=ParseChatCommand(Cmd);
    }
    DECLARE_FUNCTION(execGetWrappedString)
    {
        P_GET_TARRAY_REF(FString,out_strings);
        P_GET_STR(inMsg);
        P_GET_INT(MsgType);
        P_GET_INT_OPTX(BoundSize,300);
        P_FINISH;
        GetWrappedString(out_strings,inMsg,MsgType,BoundSize);
    }
    DECLARE_FUNCTION(execGetMyNickname)
    {
        P_FINISH;
        *(FString*)Result=GetMyNickname();
    }
    DECLARE_FUNCTION(execGetMyClanName)
    {
        P_FINISH;
        *(FString*)Result=GetMyClanName();
    }
    DECLARE_FUNCTION(execGetMyAccountID)
    {
        P_FINISH;
        *(INT*)Result=GetMyAccountID();
    }
    DECLARE_FUNCTION(execGetMyBestChannelFlag)
    {
        P_FINISH;
        *(BYTE*)Result=GetMyBestChannelFlag();
    }
    DECLARE_FUNCTION(execGetCurrentRoomState)
    {
        P_FINISH;
        *(INT*)Result=GetCurrentRoomState();
    }
    DECLARE_FUNCTION(execGetCurrentEquipState)
    {
        P_GET_INT_REF(MyTeam);
        P_GET_INT_REF(MyClass);
        P_GET_INT_REF(MyFace);
        P_GET_INT_REF(MyWeapon);
        P_FINISH;
        *(UBOOL*)Result=GetCurrentEquipState(MyTeam,MyClass,MyFace,MyWeapon);
    }
    DECLARE_FUNCTION(execGetHostAccountID)
    {
        P_FINISH;
        *(INT*)Result=GetHostAccountID();
    }
    DECLARE_FUNCTION(execAmIHost)
    {
        P_FINISH;
        *(UBOOL*)Result=AmIHost();
    }
    DECLARE_FUNCTION(execAmISpectator)
    {
        P_FINISH;
        *(UBOOL*)Result=AmISpectator();
    }
    DECLARE_FUNCTION(execAmIReady)
    {
        P_FINISH;
        *(UBOOL*)Result=AmIReady();
    }
    DECLARE_FUNCTION(execIsCountingDown)
    {
        P_FINISH;
        *(UBOOL*)Result=IsCountingDown();
    }
    DECLARE_FUNCTION(execIsGameStartable)
    {
        P_GET_UBOOL_OPTX(bCheckHost,TRUE);
        P_FINISH;
        *(UBOOL*)Result=IsGameStartable(bCheckHost);
    }
    DECLARE_FUNCTION(execIsGameStartableEx)
    {
        P_GET_STR_REF(ErrorTypeStr);
        P_GET_UBOOL_OPTX(bCheckHost,TRUE);
        P_FINISH;
        *(UBOOL*)Result=IsGameStartableEx(ErrorTypeStr,bCheckHost);
    }
    DECLARE_FUNCTION(execIsBalancedRoomPlayers)
    {
        P_GET_STR_REF(ErrorTypeStr);
        P_FINISH;
        *(UBOOL*)Result=IsBalancedRoomPlayers(ErrorTypeStr);
    }
    DECLARE_FUNCTION(execIsSpectatorAllowed)
    {
        P_FINISH;
        *(UBOOL*)Result=IsSpectatorAllowed();
    }
    DECLARE_FUNCTION(execGetCurrentMapFileName)
    {
        P_FINISH;
        *(FString*)Result=GetCurrentMapFileName();
    }
    DECLARE_FUNCTION(execGetCurrentMapMissionType)
    {
        P_FINISH;
        *(BYTE*)Result=GetCurrentMapMissionType();
    }
    DECLARE_FUNCTION(execGetMyRoomSlot)
    {
        P_FINISH;
        *(INT*)Result=GetMyRoomSlot();
    }
    DECLARE_FUNCTION(execGetPlayerRoomSlot)
    {
        P_GET_INT(idAccount);
        P_FINISH;
        *(INT*)Result=GetPlayerRoomSlot(idAccount);
    }
    DECLARE_FUNCTION(execGetRoomInfo)
    {
        P_GET_INT(RoomListIndex);
        P_GET_INT_REF(RoomID);
        P_GET_INT_REF(nPassword);
        P_GET_STR_REF(RoomName);
        P_GET_STR_REF(HostName);
        P_FINISH;
        *(UBOOL*)Result=GetRoomInfo(RoomListIndex,RoomID,nPassword,RoomName,HostName);
    }
    DECLARE_FUNCTION(execIsMatchRoom)
    {
        P_FINISH;
        *(UBOOL*)Result=IsMatchRoom();
    }
    DECLARE_FUNCTION(execGetCurrentChannelMaskLevel)
    {
        P_GET_INT_OPTX(idAccount,0);
        P_FINISH;
        *(INT*)Result=GetCurrentChannelMaskLevel(idAccount);
    }
    DECLARE_FUNCTION(execGetURLString)
    {
        P_GET_INT(idAccount);
        P_GET_STR_OPTX(Option,TEXT(""));
        P_FINISH;
        *(FString*)Result=GetURLString(idAccount,Option);
    }
    DECLARE_FUNCTION(execGetMyURLString)
    {
        P_GET_STR_OPTX(Option,TEXT(""));
        P_FINISH;
        *(FString*)Result=GetMyURLString(Option);
    }
    DECLARE_FUNCTION(execIsPlayerInGame)
    {
        P_GET_INT(idAccount);
        P_FINISH;
        *(UBOOL*)Result=IsPlayerInGame(idAccount);
    }
    DECLARE_FUNCTION(execGetPlayerInfo)
    {
        P_GET_BYTE_REF(Level);
        P_GET_BYTE_REF(LastClass);
        P_GET_BYTE_REF(LastTeam);
        P_GET_INT_REF(Exp);
        P_GET_INT_REF(SupplyPoint);
        P_GET_INT_REF(Cash);
        P_GET_INT_REF(Money);
        P_GET_INT_REF(idClanMark);
        P_FINISH;
        *(UBOOL*)Result=GetPlayerInfo(Level,LastClass,LastTeam,Exp,SupplyPoint,Cash,Money,idClanMark);
    }
    DECLARE_FUNCTION(execGetPlayerTeamIndex)
    {
        P_GET_INT(idAccount);
        P_FINISH;
        *(INT*)Result=GetPlayerTeamIndex(idAccount);
    }
    DECLARE_FUNCTION(execGetClanMarkID)
    {
        P_GET_INT(idAccount);
        P_FINISH;
        *(INT*)Result=GetClanMarkID(idAccount);
    }
    DECLARE_FUNCTION(execDoIHaveItem)
    {
        P_GET_INT(ListIndex);
        P_FINISH;
        *(UBOOL*)Result=DoIHaveItem(ListIndex);
    }
    DECLARE_FUNCTION(execDoIHaveCustomItem)
    {
        P_GET_INT(ListIndex);
        P_FINISH;
        *(UBOOL*)Result=DoIHaveCustomItem(ListIndex);
    }
    DECLARE_FUNCTION(execDoIHaveCustomItemInSlot)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT(SlotIdx);
        P_FINISH;
        *(UBOOL*)Result=DoIHaveCustomItemInSlot(InvenSlot,SlotIdx);
    }
    DECLARE_FUNCTION(execHaveFriendPlayerNamed)
    {
        P_GET_STR(FriendPlayerName);
        P_GET_INT_OPTX_REF(ListIndex,0);
        P_GET_INT_OPTX_REF(BuddyType,0);
        P_FINISH;
        *(UBOOL*)Result=HaveFriendPlayerNamed(FriendPlayerName,ListIndex,BuddyType);
    }
    DECLARE_FUNCTION(execHaveBlockedPlayerNamed)
    {
        P_GET_STR(BlockedPlayerName);
        P_GET_INT_OPTX_REF(ListIndex,0);
        P_FINISH;
        *(UBOOL*)Result=HaveBlockedPlayerNamed(BlockedPlayerName,ListIndex);
    }
    DECLARE_FUNCTION(execHaveClanMemberNamed)
    {
        P_GET_STR(BlockedPlayerName);
        P_GET_INT_OPTX_REF(ListIndex,0);
        P_FINISH;
        *(UBOOL*)Result=HaveClanMemberNamed(BlockedPlayerName,ListIndex);
    }
    DECLARE_FUNCTION(execIsBIAPlayer)
    {
        P_GET_STR(PlayerName);
        P_FINISH;
        *(UBOOL*)Result=IsBIAPlayer(PlayerName);
    }
    DECLARE_FUNCTION(execHasOwnClan)
    {
        P_GET_STR(PlayerName);
        P_GET_STR_OPTX_REF(ItsOwnClanName,TEXT(""));
        P_FINISH;
        *(UBOOL*)Result=HasOwnClan(PlayerName,ItsOwnClanName);
    }
    DECLARE_FUNCTION(execGetLobbyPlayerName)
    {
        P_GET_INT(LobbyPlayerListIndex);
        P_GET_STR_REF(PlayerName);
        P_FINISH;
        *(UBOOL*)Result=GetLobbyPlayerName(LobbyPlayerListIndex,PlayerName);
    }
    DECLARE_FUNCTION(execGetFriendPlayerName)
    {
        P_GET_INT(BuddyListIndex);
        P_GET_STR_REF(PlayerName);
        P_FINISH;
        *(UBOOL*)Result=GetFriendPlayerName(BuddyListIndex,PlayerName);
    }
    DECLARE_FUNCTION(execGetBlockedPlayerName)
    {
        P_GET_INT(BlockListIndex);
        P_GET_STR_REF(PlayerName);
        P_FINISH;
        *(UBOOL*)Result=GetBlockedPlayerName(BlockListIndex,PlayerName);
    }
    DECLARE_FUNCTION(execGetSelectedLobbyPlayerInfo)
    {
        P_GET_STR_REF(NickName);
        P_GET_STR_REF(GuildName);
        P_GET_INT_REF(Level);
        P_GET_INT_REF(WinCount);
        P_GET_INT_REF(DefeatCount);
        P_GET_INT_REF(DisconnectCount);
        P_GET_INT_REF(KillCount);
        P_GET_INT_REF(DeathCount);
        P_FINISH;
        *(UBOOL*)Result=GetSelectedLobbyPlayerInfo(NickName,GuildName,Level,WinCount,DefeatCount,DisconnectCount,KillCount,DeathCount);
    }
    DECLARE_FUNCTION(execGetSelectedFriendPlayerInfo)
    {
        P_GET_STR_REF(NickName);
        P_GET_STR_REF(GuildName);
        P_GET_INT_REF(Level);
        P_GET_INT_REF(WinCount);
        P_GET_INT_REF(DefeatCount);
        P_GET_INT_REF(DisconnectCount);
        P_GET_INT_REF(KillCount);
        P_GET_INT_REF(DeathCount);
        P_FINISH;
        *(UBOOL*)Result=GetSelectedFriendPlayerInfo(NickName,GuildName,Level,WinCount,DefeatCount,DisconnectCount,KillCount,DeathCount);
    }
    DECLARE_FUNCTION(execGetSelectedBlockedPlayerInfo)
    {
        P_GET_STR_REF(NickName);
        P_GET_STR_REF(GuildName);
        P_GET_INT_REF(Level);
        P_GET_INT_REF(WinCount);
        P_GET_INT_REF(DefeatCount);
        P_GET_INT_REF(DisconnectCount);
        P_GET_INT_REF(KillCount);
        P_GET_INT_REF(DeathCount);
        P_FINISH;
        *(UBOOL*)Result=GetSelectedBlockedPlayerInfo(NickName,GuildName,Level,WinCount,DefeatCount,DisconnectCount,KillCount,DeathCount);
    }
    DECLARE_FUNCTION(execGetSelectedGuildPlayerInfo)
    {
        P_GET_STR_REF(NickName);
        P_GET_STR_REF(GuildName);
        P_GET_INT_REF(Level);
        P_GET_INT_REF(WinCount);
        P_GET_INT_REF(DefeatCount);
        P_GET_INT_REF(DisconnectCount);
        P_GET_INT_REF(KillCount);
        P_GET_INT_REF(DeathCount);
        P_FINISH;
        *(UBOOL*)Result=GetSelectedGuildPlayerInfo(NickName,GuildName,Level,WinCount,DefeatCount,DisconnectCount,KillCount,DeathCount);
    }
    DECLARE_FUNCTION(execCheckWeaponRefundCond)
    {
        P_GET_INT(InvenSlot);
        P_FINISH;
        *(UBOOL*)Result=CheckWeaponRefundCond(InvenSlot);
    }
    DECLARE_FUNCTION(execCheckEquipRefundCond)
    {
        P_GET_INT(InvenSlot);
        P_FINISH;
        *(UBOOL*)Result=CheckEquipRefundCond(InvenSlot);
    }
    DECLARE_FUNCTION(execCheckCustomRefundCond)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT(CustomSlotIndex);
        P_FINISH;
        *(UBOOL*)Result=CheckCustomRefundCond(InvenSlot,CustomSlotIndex);
    }
    DECLARE_FUNCTION(execCheckRoomKickedState)
    {
        P_FINISH;
        *(FString*)Result=CheckRoomKickedState();
    }
    DECLARE_FUNCTION(execGetLastWhisperedPlayerName)
    {
        P_FINISH;
        *(FString*)Result=GetLastWhisperedPlayerName();
    }
    DECLARE_FUNCTION(execGetBIAAccountID)
    {
        P_FINISH;
        *(INT*)Result=GetBIAAccountID();
    }
    DECLARE_FUNCTION(execGetAvailableWeaponsBySlot)
    {
        P_GET_INT(idSlot);
        P_GET_TARRAY_REF(INT,ItemList);
        P_FINISH;
        *(INT*)Result=GetAvailableWeaponsBySlot(idSlot,ItemList);
    }
    DECLARE_FUNCTION(execGetAvailableEquipsBySlot)
    {
        P_GET_INT(idSlot);
        P_GET_TARRAY_REF(INT,ItemList);
        P_FINISH;
        *(INT*)Result=GetAvailableEquipsBySlot(idSlot,ItemList);
    }
    DECLARE_FUNCTION(execGetAvailableEffectsBySlot)
    {
        P_GET_INT(idSlot);
        P_GET_TARRAY_REF(INT,ItemList);
        P_FINISH;
        *(INT*)Result=GetAvailableEffectsBySlot(idSlot,ItemList);
    }
    DECLARE_FUNCTION(execGetWeaponName)
    {
        P_GET_INT(idItem);
        P_FINISH;
        *(FString*)Result=GetWeaponName(idItem);
    }
    DECLARE_FUNCTION(execGetSkillName)
    {
        P_GET_BYTE(PlayerClass);
        P_GET_INT(SkillID);
        P_FINISH;
        *(FString*)Result=GetSkillName(PlayerClass,SkillID);
    }
    DECLARE_FUNCTION(execGetAwardName)
    {
        P_GET_INT(AwardID);
        P_FINISH;
        *(FString*)Result=GetAwardName(AwardID);
    }
    DECLARE_FUNCTION(execGetPlayerLevelName)
    {
        P_GET_INT(PlayerLevel);
        P_FINISH;
        *(FString*)Result=GetPlayerLevelName(PlayerLevel);
    }
    DECLARE_FUNCTION(execGetItemDesc)
    {
        P_GET_INT(ItemId);
        P_GET_STR_REF(ItemName);
        P_GET_BYTE_REF(LevelLimit);
        P_GET_BYTE_REF(GaugeType);
        P_GET_INT_REF(Price);
        P_GET_INT_REF(RepairPrice);
        P_GET_INT_REF(RebuildPrice);
        P_GET_STR_REF(LiteralDesc);
        P_GET_STR_REF(IconCode);
        P_GET_INT_REF(Customizable);
        P_FINISH;
        *(UBOOL*)Result=GetItemDesc(ItemId,ItemName,LevelLimit,GaugeType,Price,RepairPrice,RebuildPrice,LiteralDesc,IconCode,Customizable);
    }
    DECLARE_FUNCTION(execGetEffectItemDesc)
    {
        P_GET_INT(ItemId);
        P_GET_INT_REF(GaugeType);
        P_GET_INT_REF(EffectType);
        P_GET_INT_REF(EffectValue);
        P_GET_STR_REF(ItemName);
        P_GET_STR_REF(ItemDesc);
        P_GET_STR_REF(IconStr);
        P_FINISH;
        *(UBOOL*)Result=GetEffectItemDesc(ItemId,GaugeType,EffectType,EffectValue,ItemName,ItemDesc,IconStr);
    }
    DECLARE_FUNCTION(execGetItemId)
    {
        P_GET_BYTE(IndexType);
        P_GET_INT(ListIndex);
        P_GET_INT_REF(ItemId);
        P_FINISH;
        *(UBOOL*)Result=GetItemId(IndexType,ListIndex,ItemId);
    }
    DECLARE_FUNCTION(execGetCustomItemID)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT(CustomSlotIndex);
        P_GET_INT_REF(ItemId);
        P_FINISH;
        *(UBOOL*)Result=GetCustomItemID(InvenSlot,CustomSlotIndex,ItemId);
    }
    DECLARE_FUNCTION(execGetWeaponRIS)
    {
        P_GET_INT(InvenSlot);
        P_GET_BYTE_REF(bIsRISConvertible);
        P_GET_INT_REF(RemodelPrice);
        P_FINISH;
        *(UBOOL*)Result=GetWeaponRIS(InvenSlot,bIsRISConvertible,RemodelPrice);
    }
    DECLARE_FUNCTION(execGetWeaponRepairInfo)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT_REF(RepairPrice);
        P_GET_BYTE_REF(bAfford);
        P_FINISH;
        *(UBOOL*)Result=GetWeaponRepairInfo(InvenSlot,RepairPrice,bAfford);
    }
    DECLARE_FUNCTION(execGetEquipRepairInfo)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT_REF(RepairPrice);
        P_GET_BYTE_REF(bAfford);
        P_FINISH;
        *(UBOOL*)Result=GetEquipRepairInfo(InvenSlot,RepairPrice,bAfford);
    }
    DECLARE_FUNCTION(execGetCustomCompInfo)
    {
        P_GET_INT(InvenSlot);
        P_GET_INT(CustomListIndex);
        P_GET_INT_REF(AlterSlot);
        P_GET_INT_REF(AlterItemID);
        P_GET_INT_REF(CompPrice);
        P_FINISH;
        *(UBOOL*)Result=GetCustomCompInfo(InvenSlot,CustomListIndex,AlterSlot,AlterItemID,CompPrice);
    }
    DECLARE_FUNCTION(execWICGetCash)
    {
        P_FINISH;
        *(UBOOL*)Result=WICGetCash();
    }
    DECLARE_FUNCTION(execWICOpenChargeWindow)
    {
        P_FINISH;
        *(UBOOL*)Result=WICOpenChargeWindow();
    }
    DECLARE_FUNCTION(execWICBuyItem)
    {
        P_GET_INT(idItem);
        P_FINISH;
        *(UBOOL*)Result=WICBuyItem(idItem);
    }
    DECLARE_FUNCTION(execWICSendGift)
    {
        P_GET_INT(idItem);
        P_GET_INT(idAccountTo);
        P_FINISH;
        *(UBOOL*)Result=WICSendGift(idItem,idAccountTo);
    }
    DECLARE_FUNCTION(execWICOpenGiftWindow)
    {
        P_GET_INT(idItem);
        P_FINISH;
        *(UBOOL*)Result=WICOpenGiftWindow(idItem);
    }
    DECLARE_FUNCTION(execBeginTransaction)
    {
        P_GET_STR(SessionName);
        P_FINISH;
        *(INT*)Result=BeginTransaction(SessionName);
    }
    DECLARE_FUNCTION(execUndoTransaction)
    {
        P_FINISH;
        *(UBOOL*)Result=UndoTransaction();
    }
    DECLARE_FUNCTION(execEndTransaction)
    {
        P_FINISH;
        *(INT*)Result=EndTransaction();
    }
    DECLARE_FUNCTION(execGetTransactionObjects)
    {
        P_GET_TARRAY_REF(class UObject*,OutObjects);
        P_FINISH;
        GetTransactionObjects(OutObjects);
    }
    DECLARE_FUNCTION(execProcCountDown)
    {
        P_FINISH;
        *(UBOOL*)Result=ProcCountDown();
    }
    DECLARE_FUNCTION(execClearRTNotice)
    {
        P_FINISH;
        ClearRTNotice();
    }
    DECLARE_FUNCTION(execGetCurrentTickerCount)
    {
        P_FINISH;
        *(INT*)Result=GetCurrentTickerCount();
    }
    DECLARE_FUNCTION(execGetChatOffDue)
    {
        P_FINISH;
        *(FLOAT*)Result=GetChatOffDue();
    }
    DECLARE_FUNCTION(execCanMyClanJoinSelectedRoom)
    {
        P_FINISH;
        *(UBOOL*)Result=CanMyClanJoinSelectedRoom();
    }
    DECLARE_FUNCTION(execGetCurrentRoomsClanNames)
    {
        P_GET_STR_REF(EUName);
        P_GET_STR_REF(NRFName);
        P_FINISH;
        GetCurrentRoomsClanNames(EUName,NRFName);
    }
    DECLARE_FUNCTION(execIsPendingPopUpMsg)
    {
        P_FINISH;
        *(UBOOL*)Result=IsPendingPopUpMsg();
    }
    DECLARE_FUNCTION(execOptionSaveUserKey)
    {
        P_GET_STR(UserKeyStr);
        P_GET_STR_OPTX(OptionStr,TEXT(""));
        P_FINISH;
        OptionSaveUserKey(UserKeyStr,OptionStr);
    }
    DECLARE_FUNCTION(execGetWorldInfo)
    {
        P_FINISH;
        *(class AWorldInfo**)Result=GetWorldInfo();
    }
    DECLARE_FUNCTION(execGetGameInfoClass)
    {
        P_FINISH;
        *(class UClass**)Result=GetGameInfoClass();
    }
    DECLARE_FUNCTION(execGetNetVersion)
    {
        P_FINISH;
        *(INT*)Result=GetNetVersion();
    }
    DECLARE_FUNCTION(execGetAvaNetHandler)
    {
        P_FINISH;
        *(class UavaNetHandler**)Result=GetAvaNetHandler();
    }
    DECLARE_FUNCTION(execGetClanMarkPkgNameFromID)
    {
        P_GET_INT(Id);
        P_GET_UBOOL_OPTX(bSmall,FALSE);
        P_GET_UBOOL_OPTX(bMarkup,FALSE);
        P_FINISH;
        *(FString*)Result=GetClanMarkPkgNameFromID(Id,bSmall,bMarkup);
    }
    void eventTick(FLOAT DeltaTime)
    {
        avaNetHandler_eventTick_Parms Parms(EC_EventParm);
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(AVAGAME_Tick),&Parms);
        }
    }
    void eventChatMessage(const FString& ChatMsg,BYTE MsgType=0,UBOOL InChannel=TRUE,UBOOL InGame=TRUE)
    {
        avaNetHandler_eventChatMessage_Parms Parms(EC_EventParm);
        Parms.ChatMsg=ChatMsg;
        Parms.MsgType=MsgType;
        Parms.InChannel=InChannel ? FIRST_BITFIELD : 0;
        Parms.InGame=InGame ? FIRST_BITFIELD : 0;
        ProcessEvent(FindFunctionChecked(AVAGAME_ChatMessage),&Parms);
    }
    void eventSendPlayerResult(INT idAccount)
    {
        avaNetHandler_eventSendPlayerResult_Parms Parms(EC_EventParm);
        Parms.idAccount=idAccount;
        ProcessEvent(FindFunctionChecked(AVAGAME_SendPlayerResult),&Parms);
    }
    void eventProcHMEndGame(UBOOL bHost)
    {
        avaNetHandler_eventProcHMEndGame_Parms Parms(EC_EventParm);
        Parms.bHost=bHost ? FIRST_BITFIELD : 0;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcHMEndGame),&Parms);
    }
    FString eventGetWeaponIconCode(INT idItem)
    {
        avaNetHandler_eventGetWeaponIconCode_Parms Parms(EC_EventParm);
        Parms.idItem=idItem;
        ProcessEvent(FindFunctionChecked(AVAGAME_GetWeaponIconCode),&Parms);
        return Parms.ReturnValue;
    }
    void eventProcSendError(BYTE Category,INT Id,const FString& Err)
    {
        avaNetHandler_eventProcSendError_Parms Parms(EC_EventParm);
        Parms.Category=Category;
        Parms.Id=Id;
        Parms.Err=Err;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcSendError),&Parms);
    }
    void eventProcOptionMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcOptionMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcOptionMessage),&Parms);
    }
    void eventProcGuildMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcGuildMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcGuildMessage),&Parms);
    }
    void eventProcBuddyMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcBuddyMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcBuddyMessage),&Parms);
    }
    void eventProcAdminMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcAdminMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcAdminMessage),&Parms);
    }
    void eventProcGameMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcGameMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcGameMessage),&Parms);
    }
    void eventProcInventoryMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcInventoryMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcInventoryMessage),&Parms);
    }
    void eventProcRoomMessageGame(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcRoomMessageGame_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcRoomMessageGame),&Parms);
    }
    void eventProcRoomMessageNet(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcRoomMessageNet_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcRoomMessageNet),&Parms);
    }
    void eventProcRoomMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcRoomMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcRoomMessage),&Parms);
    }
    void eventProcChannelMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcChannelMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcChannelMessage),&Parms);
    }
    void eventProcClientMessageGame(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcClientMessageGame_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcClientMessageGame),&Parms);
    }
    void eventProcClientMessageNet(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcClientMessageNet_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcClientMessageNet),&Parms);
    }
    void eventProcClientMessage(BYTE msg,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventProcClientMessage_Parms Parms(EC_EventParm);
        Parms.msg=msg;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcClientMessage),&Parms);
    }
    void eventProcCriticalError(const FString& Code)
    {
        avaNetHandler_eventProcCriticalError_Parms Parms(EC_EventParm);
        Parms.Code=Code;
        ProcessEvent(FindFunctionChecked(AVAGAME_ProcCriticalError),&Parms);
    }
    void eventAddPendingMsg(BYTE MsgCat,BYTE msg,class UClass* BaseGameClass,const FString& param1,const FString& param2,INT Param3,INT Param4)
    {
        avaNetHandler_eventAddPendingMsg_Parms Parms(EC_EventParm);
        Parms.MsgCat=MsgCat;
        Parms.msg=msg;
        Parms.BaseGameClass=BaseGameClass;
        Parms.param1=param1;
        Parms.param2=param2;
        Parms.Param3=Param3;
        Parms.Param4=Param4;
        ProcessEvent(FindFunctionChecked(AVAGAME_AddPendingMsg),&Parms);
    }
    void eventAddPendingEvent(class UClass* EventClass,class UClass* BaseGameClass=NULL,const TArray<FName>& BaseSceneTags=TArray<FName>(),const TArray<FName>& ExclSceneTags=TArray<FName>(),const FString& StrParam=TEXT(""),INT IntParam=0,UBOOL BoolParam=0,FLOAT FloatParam=0,class UObject* ObjParam=NULL)
    {
        avaNetHandler_eventAddPendingEvent_Parms Parms(EC_EventParm);
        Parms.EventClass=EventClass;
        Parms.BaseGameClass=BaseGameClass;
        Parms.BaseSceneTags=BaseSceneTags;
        Parms.ExclSceneTags=ExclSceneTags;
        Parms.StrParam=StrParam;
        Parms.IntParam=IntParam;
        Parms.BoolParam=BoolParam ? FIRST_BITFIELD : 0;
        Parms.FloatParam=FloatParam;
        Parms.ObjParam=ObjParam;
        ProcessEvent(FindFunctionChecked(AVAGAME_AddPendingEvent),&Parms);
    }
    void eventPopUpMessage(BYTE MsgType,const FString& PopUpMsg,const FString& NextScene,FName NextUIEventName=NAME_None,const TArray<FName>& ExclSceneTags=TArray<FName>(),FLOAT Lifetime=0)
    {
        avaNetHandler_eventPopUpMessage_Parms Parms(EC_EventParm);
        Parms.MsgType=MsgType;
        Parms.PopUpMsg=PopUpMsg;
        Parms.NextScene=NextScene;
        Parms.NextUIEventName=NextUIEventName;
        Parms.ExclSceneTags=ExclSceneTags;
        Parms.Lifetime=Lifetime;
        ProcessEvent(FindFunctionChecked(AVAGAME_PopUpMessage),&Parms);
    }
    void eventOnInit()
    {
        ProcessEvent(FindFunctionChecked(AVAGAME_OnInit),NULL);
    }
    DECLARE_CLASS(UavaNetHandler,UObject,0,avaGame)
public:
	UavaNetHandler();

	void ProcMessage(EMsgCategory MsgCat, INT MsgID, const FString &Param1, const FString &Param2, int Param3, int Param4);
	FString GetWeaponIconCode(INT idItem)
	{
		return eventGetWeaponIconCode(idItem);
	}

	void CollectLastResultInfo();
};

#endif

AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetClanMarkPkgNameFromID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetAvaNetHandler);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetNetVersion);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetGameInfoClass);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetWorldInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execOptionSaveUserKey);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsPendingPopUpMsg);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentRoomsClanNames);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCanMyClanJoinSelectedRoom);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetChatOffDue);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentTickerCount);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execClearRTNotice);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execProcCountDown);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetTransactionObjects);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execEndTransaction);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execUndoTransaction);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execBeginTransaction);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execWICOpenGiftWindow);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execWICSendGift);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execWICBuyItem);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execWICOpenChargeWindow);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execWICGetCash);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCustomCompInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetEquipRepairInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetWeaponRepairInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetWeaponRIS);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCustomItemID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetItemId);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetEffectItemDesc);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetItemDesc);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetPlayerLevelName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetAwardName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetSkillName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetWeaponName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetAvailableEffectsBySlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetAvailableEquipsBySlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetAvailableWeaponsBySlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetBIAAccountID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetLastWhisperedPlayerName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckRoomKickedState);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckCustomRefundCond);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckEquipRefundCond);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckWeaponRefundCond);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetSelectedGuildPlayerInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetSelectedBlockedPlayerInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetSelectedFriendPlayerInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetSelectedLobbyPlayerInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetBlockedPlayerName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetFriendPlayerName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetLobbyPlayerName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execHasOwnClan);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsBIAPlayer);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execHaveClanMemberNamed);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execHaveBlockedPlayerNamed);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execHaveFriendPlayerNamed);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execDoIHaveCustomItemInSlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execDoIHaveCustomItem);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execDoIHaveItem);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetClanMarkID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetPlayerTeamIndex);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetPlayerInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsPlayerInGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyURLString);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetURLString);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentChannelMaskLevel);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsMatchRoom);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetRoomInfo);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetPlayerRoomSlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyRoomSlot);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentMapMissionType);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentMapFileName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsSpectatorAllowed);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsBalancedRoomPlayers);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsGameStartableEx);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsGameStartable);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsCountingDown);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execAmIReady);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execAmISpectator);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execAmIHost);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetHostAccountID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentEquipState);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentRoomState);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyBestChannelFlag);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyAccountID);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyClanName);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetMyNickname);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetWrappedString);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execParseChatCommand);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execFilterChatMsg);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execAddChatMsg);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execSwapTeamInGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execProcHostCrash);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsVoteAvailable);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execReportVoteNew);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsGameResultValid);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execReportGameStat);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execVoteForHostBan);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execDisconnectFromGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execLeaveGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execReportEndGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execReportGameResult);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execEndGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execUpdateGameState);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execUpdatePlayerScore);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execListRoom);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execListChannel);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetConfigString2);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetConfigString);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsInPcBang);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetChannelSetting);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetCurrentChannelFlag);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsInClanLobby);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsStealthMode);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execAmIAdmin);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckMyLocation);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetConnectResult);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execIsPlayerAdult);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execGetRoomStartPlayerList);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execStartLoadingCheck);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCheckLoadingTimeOut);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execKickSlowLoadingPlayers);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execCanExitGame);
AUTOGENERATE_FUNCTION(UavaNetHandler,-1,execLeaveRoom);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#ifdef STATIC_LINKING_MOJO
#ifndef AVAGAME_NET_NATIVE_DEFS
#define AVAGAME_NET_NATIVE_DEFS

DECLARE_NATIVE_TYPE(avaGame,UavaNetHandler);

#define AUTO_INITIALIZE_REGISTRANTS_AVAGAME_NET \
	UavaNetHandler::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindavaGameUavaNetHandlerNative; \

#endif // AVAGAME_NET_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UavaNetHandler) GavaGameUavaNetHandlerNatives[] = 
{ 
	MAP_NATIVE(UavaNetHandler,execGetClanMarkPkgNameFromID)
	MAP_NATIVE(UavaNetHandler,execGetAvaNetHandler)
	MAP_NATIVE(UavaNetHandler,execGetNetVersion)
	MAP_NATIVE(UavaNetHandler,execGetGameInfoClass)
	MAP_NATIVE(UavaNetHandler,execGetWorldInfo)
	MAP_NATIVE(UavaNetHandler,execOptionSaveUserKey)
	MAP_NATIVE(UavaNetHandler,execIsPendingPopUpMsg)
	MAP_NATIVE(UavaNetHandler,execGetCurrentRoomsClanNames)
	MAP_NATIVE(UavaNetHandler,execCanMyClanJoinSelectedRoom)
	MAP_NATIVE(UavaNetHandler,execGetChatOffDue)
	MAP_NATIVE(UavaNetHandler,execGetCurrentTickerCount)
	MAP_NATIVE(UavaNetHandler,execClearRTNotice)
	MAP_NATIVE(UavaNetHandler,execProcCountDown)
	MAP_NATIVE(UavaNetHandler,execGetTransactionObjects)
	MAP_NATIVE(UavaNetHandler,execEndTransaction)
	MAP_NATIVE(UavaNetHandler,execUndoTransaction)
	MAP_NATIVE(UavaNetHandler,execBeginTransaction)
	MAP_NATIVE(UavaNetHandler,execWICOpenGiftWindow)
	MAP_NATIVE(UavaNetHandler,execWICSendGift)
	MAP_NATIVE(UavaNetHandler,execWICBuyItem)
	MAP_NATIVE(UavaNetHandler,execWICOpenChargeWindow)
	MAP_NATIVE(UavaNetHandler,execWICGetCash)
	MAP_NATIVE(UavaNetHandler,execGetCustomCompInfo)
	MAP_NATIVE(UavaNetHandler,execGetEquipRepairInfo)
	MAP_NATIVE(UavaNetHandler,execGetWeaponRepairInfo)
	MAP_NATIVE(UavaNetHandler,execGetWeaponRIS)
	MAP_NATIVE(UavaNetHandler,execGetCustomItemID)
	MAP_NATIVE(UavaNetHandler,execGetItemId)
	MAP_NATIVE(UavaNetHandler,execGetEffectItemDesc)
	MAP_NATIVE(UavaNetHandler,execGetItemDesc)
	MAP_NATIVE(UavaNetHandler,execGetPlayerLevelName)
	MAP_NATIVE(UavaNetHandler,execGetAwardName)
	MAP_NATIVE(UavaNetHandler,execGetSkillName)
	MAP_NATIVE(UavaNetHandler,execGetWeaponName)
	MAP_NATIVE(UavaNetHandler,execGetAvailableEffectsBySlot)
	MAP_NATIVE(UavaNetHandler,execGetAvailableEquipsBySlot)
	MAP_NATIVE(UavaNetHandler,execGetAvailableWeaponsBySlot)
	MAP_NATIVE(UavaNetHandler,execGetBIAAccountID)
	MAP_NATIVE(UavaNetHandler,execGetLastWhisperedPlayerName)
	MAP_NATIVE(UavaNetHandler,execCheckRoomKickedState)
	MAP_NATIVE(UavaNetHandler,execCheckCustomRefundCond)
	MAP_NATIVE(UavaNetHandler,execCheckEquipRefundCond)
	MAP_NATIVE(UavaNetHandler,execCheckWeaponRefundCond)
	MAP_NATIVE(UavaNetHandler,execGetSelectedGuildPlayerInfo)
	MAP_NATIVE(UavaNetHandler,execGetSelectedBlockedPlayerInfo)
	MAP_NATIVE(UavaNetHandler,execGetSelectedFriendPlayerInfo)
	MAP_NATIVE(UavaNetHandler,execGetSelectedLobbyPlayerInfo)
	MAP_NATIVE(UavaNetHandler,execGetBlockedPlayerName)
	MAP_NATIVE(UavaNetHandler,execGetFriendPlayerName)
	MAP_NATIVE(UavaNetHandler,execGetLobbyPlayerName)
	MAP_NATIVE(UavaNetHandler,execHasOwnClan)
	MAP_NATIVE(UavaNetHandler,execIsBIAPlayer)
	MAP_NATIVE(UavaNetHandler,execHaveClanMemberNamed)
	MAP_NATIVE(UavaNetHandler,execHaveBlockedPlayerNamed)
	MAP_NATIVE(UavaNetHandler,execHaveFriendPlayerNamed)
	MAP_NATIVE(UavaNetHandler,execDoIHaveCustomItemInSlot)
	MAP_NATIVE(UavaNetHandler,execDoIHaveCustomItem)
	MAP_NATIVE(UavaNetHandler,execDoIHaveItem)
	MAP_NATIVE(UavaNetHandler,execGetClanMarkID)
	MAP_NATIVE(UavaNetHandler,execGetPlayerTeamIndex)
	MAP_NATIVE(UavaNetHandler,execGetPlayerInfo)
	MAP_NATIVE(UavaNetHandler,execIsPlayerInGame)
	MAP_NATIVE(UavaNetHandler,execGetMyURLString)
	MAP_NATIVE(UavaNetHandler,execGetURLString)
	MAP_NATIVE(UavaNetHandler,execGetCurrentChannelMaskLevel)
	MAP_NATIVE(UavaNetHandler,execIsMatchRoom)
	MAP_NATIVE(UavaNetHandler,execGetRoomInfo)
	MAP_NATIVE(UavaNetHandler,execGetPlayerRoomSlot)
	MAP_NATIVE(UavaNetHandler,execGetMyRoomSlot)
	MAP_NATIVE(UavaNetHandler,execGetCurrentMapMissionType)
	MAP_NATIVE(UavaNetHandler,execGetCurrentMapFileName)
	MAP_NATIVE(UavaNetHandler,execIsSpectatorAllowed)
	MAP_NATIVE(UavaNetHandler,execIsBalancedRoomPlayers)
	MAP_NATIVE(UavaNetHandler,execIsGameStartableEx)
	MAP_NATIVE(UavaNetHandler,execIsGameStartable)
	MAP_NATIVE(UavaNetHandler,execIsCountingDown)
	MAP_NATIVE(UavaNetHandler,execAmIReady)
	MAP_NATIVE(UavaNetHandler,execAmISpectator)
	MAP_NATIVE(UavaNetHandler,execAmIHost)
	MAP_NATIVE(UavaNetHandler,execGetHostAccountID)
	MAP_NATIVE(UavaNetHandler,execGetCurrentEquipState)
	MAP_NATIVE(UavaNetHandler,execGetCurrentRoomState)
	MAP_NATIVE(UavaNetHandler,execGetMyBestChannelFlag)
	MAP_NATIVE(UavaNetHandler,execGetMyAccountID)
	MAP_NATIVE(UavaNetHandler,execGetMyClanName)
	MAP_NATIVE(UavaNetHandler,execGetMyNickname)
	MAP_NATIVE(UavaNetHandler,execGetWrappedString)
	MAP_NATIVE(UavaNetHandler,execParseChatCommand)
	MAP_NATIVE(UavaNetHandler,execFilterChatMsg)
	MAP_NATIVE(UavaNetHandler,execAddChatMsg)
	MAP_NATIVE(UavaNetHandler,execSwapTeamInGame)
	MAP_NATIVE(UavaNetHandler,execProcHostCrash)
	MAP_NATIVE(UavaNetHandler,execIsVoteAvailable)
	MAP_NATIVE(UavaNetHandler,execReportVoteNew)
	MAP_NATIVE(UavaNetHandler,execIsGameResultValid)
	MAP_NATIVE(UavaNetHandler,execReportGameStat)
	MAP_NATIVE(UavaNetHandler,execVoteForHostBan)
	MAP_NATIVE(UavaNetHandler,execDisconnectFromGame)
	MAP_NATIVE(UavaNetHandler,execLeaveGame)
	MAP_NATIVE(UavaNetHandler,execReportEndGame)
	MAP_NATIVE(UavaNetHandler,execReportGameResult)
	MAP_NATIVE(UavaNetHandler,execEndGame)
	MAP_NATIVE(UavaNetHandler,execUpdateGameState)
	MAP_NATIVE(UavaNetHandler,execUpdatePlayerScore)
	MAP_NATIVE(UavaNetHandler,execListRoom)
	MAP_NATIVE(UavaNetHandler,execListChannel)
	MAP_NATIVE(UavaNetHandler,execGetConfigString2)
	MAP_NATIVE(UavaNetHandler,execGetConfigString)
	MAP_NATIVE(UavaNetHandler,execIsInPcBang)
	MAP_NATIVE(UavaNetHandler,execGetChannelSetting)
	MAP_NATIVE(UavaNetHandler,execGetCurrentChannelFlag)
	MAP_NATIVE(UavaNetHandler,execIsInClanLobby)
	MAP_NATIVE(UavaNetHandler,execIsStealthMode)
	MAP_NATIVE(UavaNetHandler,execAmIAdmin)
	MAP_NATIVE(UavaNetHandler,execCheckMyLocation)
	MAP_NATIVE(UavaNetHandler,execGetConnectResult)
	MAP_NATIVE(UavaNetHandler,execIsPlayerAdult)
	MAP_NATIVE(UavaNetHandler,execGetRoomStartPlayerList)
	MAP_NATIVE(UavaNetHandler,execStartLoadingCheck)
	MAP_NATIVE(UavaNetHandler,execCheckLoadingTimeOut)
	MAP_NATIVE(UavaNetHandler,execKickSlowLoadingPlayers)
	MAP_NATIVE(UavaNetHandler,execCanExitGame)
	MAP_NATIVE(UavaNetHandler,execLeaveRoom)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(avaGame,UavaNetHandler);

#endif // NATIVES_ONLY
#endif // STATIC_LINKING_MOJO

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_OFFSET_NODIE(U,avaNetHandler,WeaponIDList)
VERIFY_CLASS_OFFSET_NODIE(U,avaNetHandler,Trans)
VERIFY_CLASS_SIZE_NODIE(UavaNetHandler)
#endif // VERIFY_CLASS_SIZES
#endif // !ENUMS_ONLY

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
